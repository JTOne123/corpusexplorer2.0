//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 05.01.2019 23:35:47
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace CorpusExplorer.Sdk.Extern.OpenThesaurus.Db
{

    [DatabaseAttribute(Name = "openthesaurus")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class OpenThesaurusContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(OpenThesaurusContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertCategoryLink(CategoryLink instance);
        partial void UpdateCategoryLink(CategoryLink instance);
        partial void DeleteCategoryLink(CategoryLink instance);
        partial void InsertLanguage(Language instance);
        partial void UpdateLanguage(Language instance);
        partial void DeleteLanguage(Language instance);
        partial void InsertLinkType(LinkType instance);
        partial void UpdateLinkType(LinkType instance);
        partial void DeleteLinkType(LinkType instance);
        partial void InsertSynset(Synset instance);
        partial void UpdateSynset(Synset instance);
        partial void DeleteSynset(Synset instance);
        partial void InsertSynsetLink(SynsetLink instance);
        partial void UpdateSynsetLink(SynsetLink instance);
        partial void DeleteSynsetLink(SynsetLink instance);
        partial void InsertTag(Tag instance);
        partial void UpdateTag(Tag instance);
        partial void DeleteTag(Tag instance);
        partial void InsertTerm(Term instance);
        partial void UpdateTerm(Term instance);
        partial void DeleteTerm(Term instance);
        partial void InsertTermLevel(TermLevel instance);
        partial void UpdateTermLevel(TermLevel instance);
        partial void DeleteTermLevel(TermLevel instance);
        partial void InsertTermLink(TermLink instance);
        partial void UpdateTermLink(TermLink instance);
        partial void DeleteTermLink(TermLink instance);
        partial void InsertTermLinkType(TermLinkType instance);
        partial void UpdateTermLinkType(TermLinkType instance);
        partial void DeleteTermLinkType(TermLinkType instance);

        #endregion

        public OpenThesaurusContext() :
        base(GetConnectionString("OpenThesauruDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public OpenThesaurusContext(MappingSource mappingSource) :
        base(GetConnectionString("OpenThesauruDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public OpenThesaurusContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public OpenThesaurusContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public OpenThesaurusContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public OpenThesaurusContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public Devart.Data.Linq.Table<CategoryLink> CategoryLinks
        {
            get
            {
                return this.GetTable<CategoryLink>();
            }
        }

        public Devart.Data.Linq.Table<Language> Languages
        {
            get
            {
                return this.GetTable<Language>();
            }
        }

        public Devart.Data.Linq.Table<LinkType> LinkTypes
        {
            get
            {
                return this.GetTable<LinkType>();
            }
        }

        public Devart.Data.Linq.Table<Synset> Synsets
        {
            get
            {
                return this.GetTable<Synset>();
            }
        }

        public Devart.Data.Linq.Table<SynsetLink> SynsetLinks
        {
            get
            {
                return this.GetTable<SynsetLink>();
            }
        }

        public Devart.Data.Linq.Table<Tag> Tags
        {
            get
            {
                return this.GetTable<Tag>();
            }
        }

        public Devart.Data.Linq.Table<Term> Terms
        {
            get
            {
                return this.GetTable<Term>();
            }
        }

        public Devart.Data.Linq.Table<TermLevel> TermLevels
        {
            get
            {
                return this.GetTable<TermLevel>();
            }
        }

        public Devart.Data.Linq.Table<TermLink> TermLinks
        {
            get
            {
                return this.GetTable<TermLink>();
            }
        }

        public Devart.Data.Linq.Table<TermLinkType> TermLinkTypes
        {
            get
            {
                return this.GetTable<TermLinkType>();
            }
        }

        public Devart.Data.Linq.Table<TermTag> TermTags
        {
            get
            {
                return this.GetTable<TermTag>();
            }
        }

        public Devart.Data.Linq.Table<WordMapping> WordMappings
        {
            get
            {
                return this.GetTable<WordMapping>();
            }
        }
    }
}

namespace CorpusExplorer.Sdk.Extern.OpenThesaurus.Db
{

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.Category in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.category")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private string _CategoryName;

        private bool? _IsDisabled;
        #pragma warning restore 0649

        private EntitySet<CategoryLink> _CategoryLinks;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnIsDisabledChanging(bool? value);
        partial void OnIsDisabledChanged();
        #endregion

        public Category()
        {
            this._CategoryLinks = new EntitySet<CategoryLink>(new Action<CategoryLink>(this.attach_CategoryLinks), new Action<CategoryLink>(this.detach_CategoryLinks));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Name = @"category_name", Storage = "_CategoryName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging("CategoryName");
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsDisabled in the schema.
        /// </summary>
        [Column(Name = @"is_disabled", Storage = "_IsDisabled", DbType = "BIT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool? IsDisabled
        {
            get
            {
                return this._IsDisabled;
            }
            set
            {
                if (this._IsDisabled != value)
                {
                    this.OnIsDisabledChanging(value);
                    this.SendPropertyChanging("IsDisabled");
                    this._IsDisabled = value;
                    this.SendPropertyChanged("IsDisabled");
                    this.OnIsDisabledChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryLinks in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_CategoryLink", Storage="_CategoryLinks", ThisKey="Id", OtherKey="CategoryId")]
        public EntitySet<CategoryLink> CategoryLinks
        {
            get
            {
                return this._CategoryLinks;
            }
            set
            {
                this._CategoryLinks.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CategoryLinks(CategoryLink entity)
        {
            this.SendPropertyChanging("CategoryLinks");
            entity.Category = this;
        }
    
        private void detach_CategoryLinks(CategoryLink entity)
        {
            this.SendPropertyChanging("CategoryLinks");
            entity.Category = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.CategoryLink in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.category_link")]
    public partial class CategoryLink : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private long _CategoryId;

        private long _SynsetId;
        #pragma warning restore 0649

        private EntityRef<Synset> _Synset;

        private EntityRef<Category> _Category;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnCategoryIdChanging(long value);
        partial void OnCategoryIdChanged();
        partial void OnSynsetIdChanging(long value);
        partial void OnSynsetIdChanged();
        #endregion

        public CategoryLink()
        {
            this._Synset  = default(EntityRef<Synset>);
            this._Category  = default(EntityRef<Category>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"category_id", Storage = "_CategoryId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetId in the schema.
        /// </summary>
        [Column(Name = @"synset_id", Storage = "_SynsetId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long SynsetId
        {
            get
            {
                return this._SynsetId;
            }
            set
            {
                if (this._SynsetId != value)
                {
                    if (this._Synset.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSynsetIdChanging(value);
                    this.SendPropertyChanging("SynsetId");
                    this._SynsetId = value;
                    this.SendPropertyChanged("SynsetId");
                    this.OnSynsetIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Synset in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Synset_CategoryLink", Storage="_Synset", ThisKey="SynsetId", OtherKey="Id", IsForeignKey=true)]
        public Synset Synset
        {
            get
            {
                return this._Synset.Entity;
            }
            set
            {
                Synset previousValue = this._Synset.Entity;
                if ((previousValue != value) || (this._Synset.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Synset");
                    if (previousValue != null)
                    {
                        this._Synset.Entity = null;
                        previousValue.CategoryLinks.Remove(this);
                    }
                    this._Synset.Entity = value;
                    if (value != null)
                    {
                        this._SynsetId = value.Id;
                        value.CategoryLinks.Add(this);
                    }
                    else
                    {
                        this._SynsetId = default(long);
                    }
                    this.SendPropertyChanged("Synset");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_CategoryLink", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if ((previousValue != value) || (this._Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Category");
                    if (previousValue != null)
                    {
                        this._Category.Entity = null;
                        previousValue.CategoryLinks.Remove(this);
                    }
                    this._Category.Entity = value;
                    if (value != null)
                    {
                        this._CategoryId = value.Id;
                        value.CategoryLinks.Add(this);
                    }
                    else
                    {
                        this._CategoryId = default(long);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.Language in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.language")]
    public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private string _LongForm;

        private string _ShortForm;

        private bool? _IsDisabled;
        #pragma warning restore 0649

        private EntitySet<Term> _Terms;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnLongFormChanging(string value);
        partial void OnLongFormChanged();
        partial void OnShortFormChanging(string value);
        partial void OnShortFormChanged();
        partial void OnIsDisabledChanging(bool? value);
        partial void OnIsDisabledChanged();
        #endregion

        public Language()
        {
            this._Terms = new EntitySet<Term>(new Action<Term>(this.attach_Terms), new Action<Term>(this.detach_Terms));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL AUTO_INCREMENT", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LongForm in the schema.
        /// </summary>
        [Column(Name = @"long_form", Storage = "_LongForm", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LongForm
        {
            get
            {
                return this._LongForm;
            }
            set
            {
                if (this._LongForm != value)
                {
                    this.OnLongFormChanging(value);
                    this.SendPropertyChanging("LongForm");
                    this._LongForm = value;
                    this.SendPropertyChanged("LongForm");
                    this.OnLongFormChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShortForm in the schema.
        /// </summary>
        [Column(Name = @"short_form", Storage = "_ShortForm", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShortForm
        {
            get
            {
                return this._ShortForm;
            }
            set
            {
                if (this._ShortForm != value)
                {
                    this.OnShortFormChanging(value);
                    this.SendPropertyChanging("ShortForm");
                    this._ShortForm = value;
                    this.SendPropertyChanged("ShortForm");
                    this.OnShortFormChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsDisabled in the schema.
        /// </summary>
        [Column(Name = @"is_disabled", Storage = "_IsDisabled", DbType = "BIT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool? IsDisabled
        {
            get
            {
                return this._IsDisabled;
            }
            set
            {
                if (this._IsDisabled != value)
                {
                    this.OnIsDisabledChanging(value);
                    this.SendPropertyChanging("IsDisabled");
                    this._IsDisabled = value;
                    this.SendPropertyChanged("IsDisabled");
                    this.OnIsDisabledChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Terms in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Language_Term", Storage="_Terms", ThisKey="Id", OtherKey="LanguageId")]
        public EntitySet<Term> Terms
        {
            get
            {
                return this._Terms;
            }
            set
            {
                this._Terms.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Terms(Term entity)
        {
            this.SendPropertyChanging("Terms");
            entity.Language = this;
        }
    
        private void detach_Terms(Term entity)
        {
            this.SendPropertyChanging("Terms");
            entity.Language = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.LinkType in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.link_type")]
    public partial class LinkType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private string _LinkName;

        private string _OtherDirectionLinkName;

        private string _VerbName;
        #pragma warning restore 0649

        private EntitySet<SynsetLink> _SynsetLinks;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnLinkNameChanging(string value);
        partial void OnLinkNameChanged();
        partial void OnOtherDirectionLinkNameChanging(string value);
        partial void OnOtherDirectionLinkNameChanged();
        partial void OnVerbNameChanging(string value);
        partial void OnVerbNameChanged();
        #endregion

        public LinkType()
        {
            this._SynsetLinks = new EntitySet<SynsetLink>(new Action<SynsetLink>(this.attach_SynsetLinks), new Action<SynsetLink>(this.detach_SynsetLinks));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LinkName in the schema.
        /// </summary>
        [Column(Name = @"link_name", Storage = "_LinkName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LinkName
        {
            get
            {
                return this._LinkName;
            }
            set
            {
                if (this._LinkName != value)
                {
                    this.OnLinkNameChanging(value);
                    this.SendPropertyChanging("LinkName");
                    this._LinkName = value;
                    this.SendPropertyChanged("LinkName");
                    this.OnLinkNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OtherDirectionLinkName in the schema.
        /// </summary>
        [Column(Name = @"other_direction_link_name", Storage = "_OtherDirectionLinkName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string OtherDirectionLinkName
        {
            get
            {
                return this._OtherDirectionLinkName;
            }
            set
            {
                if (this._OtherDirectionLinkName != value)
                {
                    this.OnOtherDirectionLinkNameChanging(value);
                    this.SendPropertyChanging("OtherDirectionLinkName");
                    this._OtherDirectionLinkName = value;
                    this.SendPropertyChanged("OtherDirectionLinkName");
                    this.OnOtherDirectionLinkNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VerbName in the schema.
        /// </summary>
        [Column(Name = @"verb_name", Storage = "_VerbName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string VerbName
        {
            get
            {
                return this._VerbName;
            }
            set
            {
                if (this._VerbName != value)
                {
                    this.OnVerbNameChanging(value);
                    this.SendPropertyChanging("VerbName");
                    this._VerbName = value;
                    this.SendPropertyChanged("VerbName");
                    this.OnVerbNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetLinks in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LinkType_SynsetLink", Storage="_SynsetLinks", ThisKey="Id", OtherKey="LinkTypeId")]
        public EntitySet<SynsetLink> SynsetLinks
        {
            get
            {
                return this._SynsetLinks;
            }
            set
            {
                this._SynsetLinks.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SynsetLinks(SynsetLink entity)
        {
            this.SendPropertyChanging("SynsetLinks");
            entity.LinkType = this;
        }
    
        private void detach_SynsetLinks(SynsetLink entity)
        {
            this.SendPropertyChanging("SynsetLinks");
            entity.LinkType = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.Synset in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.synset")]
    public partial class Synset : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private int? _Evaluation;

        private bool _IsVisible;

        private int? _OriginalId;

        private long? _PreferredCategoryId;
        #pragma warning restore 0649

        private EntitySet<Term> _Terms;

        private EntitySet<SynsetLink> _SynsetLinkSources;

        private EntitySet<SynsetLink> _SynsetLinkTargets;

        private EntitySet<CategoryLink> _CategoryLinks;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnEvaluationChanging(int? value);
        partial void OnEvaluationChanged();
        partial void OnIsVisibleChanging(bool value);
        partial void OnIsVisibleChanged();
        partial void OnOriginalIdChanging(int? value);
        partial void OnOriginalIdChanged();
        partial void OnPreferredCategoryIdChanging(long? value);
        partial void OnPreferredCategoryIdChanged();
        #endregion

        public Synset()
        {
            this._Terms = new EntitySet<Term>(new Action<Term>(this.attach_Terms), new Action<Term>(this.detach_Terms));
            this._SynsetLinkSources = new EntitySet<SynsetLink>(new Action<SynsetLink>(this.attach_SynsetLinkSources), new Action<SynsetLink>(this.detach_SynsetLinkSources));
            this._SynsetLinkTargets = new EntitySet<SynsetLink>(new Action<SynsetLink>(this.attach_SynsetLinkTargets), new Action<SynsetLink>(this.detach_SynsetLinkTargets));
            this._CategoryLinks = new EntitySet<CategoryLink>(new Action<CategoryLink>(this.attach_CategoryLinks), new Action<CategoryLink>(this.detach_CategoryLinks));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Evaluation in the schema.
        /// </summary>
        [Column(Name = @"evaluation", Storage = "_Evaluation", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? Evaluation
        {
            get
            {
                return this._Evaluation;
            }
            set
            {
                if (this._Evaluation != value)
                {
                    this.OnEvaluationChanging(value);
                    this.SendPropertyChanging("Evaluation");
                    this._Evaluation = value;
                    this.SendPropertyChanged("Evaluation");
                    this.OnEvaluationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsVisible in the schema.
        /// </summary>
        [Column(Name = @"is_visible", Storage = "_IsVisible", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsVisible
        {
            get
            {
                return this._IsVisible;
            }
            set
            {
                if (this._IsVisible != value)
                {
                    this.OnIsVisibleChanging(value);
                    this.SendPropertyChanging("IsVisible");
                    this._IsVisible = value;
                    this.SendPropertyChanged("IsVisible");
                    this.OnIsVisibleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalId in the schema.
        /// </summary>
        [Column(Name = @"original_id", Storage = "_OriginalId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? OriginalId
        {
            get
            {
                return this._OriginalId;
            }
            set
            {
                if (this._OriginalId != value)
                {
                    this.OnOriginalIdChanging(value);
                    this.SendPropertyChanging("OriginalId");
                    this._OriginalId = value;
                    this.SendPropertyChanged("OriginalId");
                    this.OnOriginalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PreferredCategoryId in the schema.
        /// </summary>
        [Column(Name = @"preferred_category_id", Storage = "_PreferredCategoryId", DbType = "BIGINT(20) NULL", UpdateCheck = UpdateCheck.Never)]
        public long? PreferredCategoryId
        {
            get
            {
                return this._PreferredCategoryId;
            }
            set
            {
                if (this._PreferredCategoryId != value)
                {
                    this.OnPreferredCategoryIdChanging(value);
                    this.SendPropertyChanging("PreferredCategoryId");
                    this._PreferredCategoryId = value;
                    this.SendPropertyChanged("PreferredCategoryId");
                    this.OnPreferredCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Terms in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Synset_Term", Storage="_Terms", ThisKey="Id", OtherKey="SynsetId")]
        public EntitySet<Term> Terms
        {
            get
            {
                return this._Terms;
            }
            set
            {
                this._Terms.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetLinkSources in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Synset_SynsetLink", Storage="_SynsetLinkSources", ThisKey="Id", OtherKey="SynsetId")]
        public EntitySet<SynsetLink> SynsetLinkSources
        {
            get
            {
                return this._SynsetLinkSources;
            }
            set
            {
                this._SynsetLinkSources.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetLinkTargets in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Synset_SynsetLink1", Storage="_SynsetLinkTargets", ThisKey="Id", OtherKey="TargetSynsetId")]
        public EntitySet<SynsetLink> SynsetLinkTargets
        {
            get
            {
                return this._SynsetLinkTargets;
            }
            set
            {
                this._SynsetLinkTargets.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryLinks in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Synset_CategoryLink", Storage="_CategoryLinks", ThisKey="Id", OtherKey="SynsetId")]
        public EntitySet<CategoryLink> CategoryLinks
        {
            get
            {
                return this._CategoryLinks;
            }
            set
            {
                this._CategoryLinks.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Terms(Term entity)
        {
            this.SendPropertyChanging("Terms");
            entity.Synset = this;
        }
    
        private void detach_Terms(Term entity)
        {
            this.SendPropertyChanging("Terms");
            entity.Synset = null;
        }

        private void attach_SynsetLinkSources(SynsetLink entity)
        {
            this.SendPropertyChanging("SynsetLinkSources");
            entity.SynsetSource = this;
        }
    
        private void detach_SynsetLinkSources(SynsetLink entity)
        {
            this.SendPropertyChanging("SynsetLinkSources");
            entity.SynsetSource = null;
        }

        private void attach_SynsetLinkTargets(SynsetLink entity)
        {
            this.SendPropertyChanging("SynsetLinkTargets");
            entity.SynsetTarget = this;
        }
    
        private void detach_SynsetLinkTargets(SynsetLink entity)
        {
            this.SendPropertyChanging("SynsetLinkTargets");
            entity.SynsetTarget = null;
        }

        private void attach_CategoryLinks(CategoryLink entity)
        {
            this.SendPropertyChanging("CategoryLinks");
            entity.Synset = this;
        }
    
        private void detach_CategoryLinks(CategoryLink entity)
        {
            this.SendPropertyChanging("CategoryLinks");
            entity.Synset = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.SynsetLink in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.synset_link")]
    public partial class SynsetLink : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private int? _EvaluationStatus;

        private int? _FactCount;

        private long _LinkTypeId;

        private long _SynsetId;

        private long _TargetSynsetId;
        #pragma warning restore 0649

        private EntityRef<Synset> _SynsetSource;

        private EntityRef<Synset> _SynsetTarget;

        private EntityRef<LinkType> _LinkType;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnEvaluationStatusChanging(int? value);
        partial void OnEvaluationStatusChanged();
        partial void OnFactCountChanging(int? value);
        partial void OnFactCountChanged();
        partial void OnLinkTypeIdChanging(long value);
        partial void OnLinkTypeIdChanged();
        partial void OnSynsetIdChanging(long value);
        partial void OnSynsetIdChanged();
        partial void OnTargetSynsetIdChanging(long value);
        partial void OnTargetSynsetIdChanged();
        #endregion

        public SynsetLink()
        {
            this._SynsetSource  = default(EntityRef<Synset>);
            this._SynsetTarget  = default(EntityRef<Synset>);
            this._LinkType  = default(EntityRef<LinkType>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EvaluationStatus in the schema.
        /// </summary>
        [Column(Name = @"evaluation_status", Storage = "_EvaluationStatus", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? EvaluationStatus
        {
            get
            {
                return this._EvaluationStatus;
            }
            set
            {
                if (this._EvaluationStatus != value)
                {
                    this.OnEvaluationStatusChanging(value);
                    this.SendPropertyChanging("EvaluationStatus");
                    this._EvaluationStatus = value;
                    this.SendPropertyChanged("EvaluationStatus");
                    this.OnEvaluationStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FactCount in the schema.
        /// </summary>
        [Column(Name = @"fact_count", Storage = "_FactCount", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? FactCount
        {
            get
            {
                return this._FactCount;
            }
            set
            {
                if (this._FactCount != value)
                {
                    this.OnFactCountChanging(value);
                    this.SendPropertyChanging("FactCount");
                    this._FactCount = value;
                    this.SendPropertyChanged("FactCount");
                    this.OnFactCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LinkTypeId in the schema.
        /// </summary>
        [Column(Name = @"link_type_id", Storage = "_LinkTypeId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long LinkTypeId
        {
            get
            {
                return this._LinkTypeId;
            }
            set
            {
                if (this._LinkTypeId != value)
                {
                    if (this._LinkType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLinkTypeIdChanging(value);
                    this.SendPropertyChanging("LinkTypeId");
                    this._LinkTypeId = value;
                    this.SendPropertyChanged("LinkTypeId");
                    this.OnLinkTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetId in the schema.
        /// </summary>
        [Column(Name = @"synset_id", Storage = "_SynsetId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long SynsetId
        {
            get
            {
                return this._SynsetId;
            }
            set
            {
                if (this._SynsetId != value)
                {
                    if (this._SynsetSource.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSynsetIdChanging(value);
                    this.SendPropertyChanging("SynsetId");
                    this._SynsetId = value;
                    this.SendPropertyChanged("SynsetId");
                    this.OnSynsetIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TargetSynsetId in the schema.
        /// </summary>
        [Column(Name = @"target_synset_id", Storage = "_TargetSynsetId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long TargetSynsetId
        {
            get
            {
                return this._TargetSynsetId;
            }
            set
            {
                if (this._TargetSynsetId != value)
                {
                    if (this._SynsetTarget.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTargetSynsetIdChanging(value);
                    this.SendPropertyChanging("TargetSynsetId");
                    this._TargetSynsetId = value;
                    this.SendPropertyChanged("TargetSynsetId");
                    this.OnTargetSynsetIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetSource in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Synset_SynsetLink", Storage="_SynsetSource", ThisKey="SynsetId", OtherKey="Id", IsForeignKey=true)]
        public Synset SynsetSource
        {
            get
            {
                return this._SynsetSource.Entity;
            }
            set
            {
                Synset previousValue = this._SynsetSource.Entity;
                if ((previousValue != value) || (this._SynsetSource.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SynsetSource");
                    if (previousValue != null)
                    {
                        this._SynsetSource.Entity = null;
                        previousValue.SynsetLinkSources.Remove(this);
                    }
                    this._SynsetSource.Entity = value;
                    if (value != null)
                    {
                        this._SynsetId = value.Id;
                        value.SynsetLinkSources.Add(this);
                    }
                    else
                    {
                        this._SynsetId = default(long);
                    }
                    this.SendPropertyChanged("SynsetSource");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetTarget in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Synset_SynsetLink1", Storage="_SynsetTarget", ThisKey="TargetSynsetId", OtherKey="Id", IsForeignKey=true)]
        public Synset SynsetTarget
        {
            get
            {
                return this._SynsetTarget.Entity;
            }
            set
            {
                Synset previousValue = this._SynsetTarget.Entity;
                if ((previousValue != value) || (this._SynsetTarget.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SynsetTarget");
                    if (previousValue != null)
                    {
                        this._SynsetTarget.Entity = null;
                        previousValue.SynsetLinkTargets.Remove(this);
                    }
                    this._SynsetTarget.Entity = value;
                    if (value != null)
                    {
                        this._TargetSynsetId = value.Id;
                        value.SynsetLinkTargets.Add(this);
                    }
                    else
                    {
                        this._TargetSynsetId = default(long);
                    }
                    this.SendPropertyChanged("SynsetTarget");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LinkType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LinkType_SynsetLink", Storage="_LinkType", ThisKey="LinkTypeId", OtherKey="Id", IsForeignKey=true)]
        public LinkType LinkType
        {
            get
            {
                return this._LinkType.Entity;
            }
            set
            {
                LinkType previousValue = this._LinkType.Entity;
                if ((previousValue != value) || (this._LinkType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LinkType");
                    if (previousValue != null)
                    {
                        this._LinkType.Entity = null;
                        previousValue.SynsetLinks.Remove(this);
                    }
                    this._LinkType.Entity = value;
                    if (value != null)
                    {
                        this._LinkTypeId = value.Id;
                        value.SynsetLinks.Add(this);
                    }
                    else
                    {
                        this._LinkTypeId = default(long);
                    }
                    this.SendPropertyChanged("LinkType");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.Tag in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.tag")]
    public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private string _Color;

        private System.DateTime _Created;

        private string _CreatedBy;

        private string _Name;

        private string _ShortName;

        private bool? _IsVisible;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();
        partial void OnIsVisibleChanging(bool? value);
        partial void OnIsVisibleChanged();
        #endregion

        public Tag()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Color in the schema.
        /// </summary>
        [Column(Name = @"color", Storage = "_Color", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Color
        {
            get
            {
                return this._Color;
            }
            set
            {
                if (this._Color != value)
                {
                    this.OnColorChanging(value);
                    this.SendPropertyChanging("Color");
                    this._Color = value;
                    this.SendPropertyChanged("Color");
                    this.OnColorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Name = @"created", Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
            set
            {
                if (this._Created != value)
                {
                    this.OnCreatedChanging(value);
                    this.SendPropertyChanging("Created");
                    this._Created = value;
                    this.SendPropertyChanged("Created");
                    this.OnCreatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreatedBy in the schema.
        /// </summary>
        [Column(Name = @"created_by", Storage = "_CreatedBy", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if (this._CreatedBy != value)
                {
                    this.OnCreatedByChanging(value);
                    this.SendPropertyChanging("CreatedBy");
                    this._CreatedBy = value;
                    this.SendPropertyChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShortName in the schema.
        /// </summary>
        [Column(Name = @"short_name", Storage = "_ShortName", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShortName
        {
            get
            {
                return this._ShortName;
            }
            set
            {
                if (this._ShortName != value)
                {
                    this.OnShortNameChanging(value);
                    this.SendPropertyChanging("ShortName");
                    this._ShortName = value;
                    this.SendPropertyChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsVisible in the schema.
        /// </summary>
        [Column(Name = @"is_visible", Storage = "_IsVisible", DbType = "BIT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool? IsVisible
        {
            get
            {
                return this._IsVisible;
            }
            set
            {
                if (this._IsVisible != value)
                {
                    this.OnIsVisibleChanging(value);
                    this.SendPropertyChanging("IsVisible");
                    this._IsVisible = value;
                    this.SendPropertyChanged("IsVisible");
                    this.OnIsVisibleChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.Term in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.term")]
    public partial class Term : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private long? _LanguageId;

        private long? _LevelId;

        private string _NormalizedWord;

        private int? _OriginalId;

        private long _SynsetId;

        private string _UserComment;

        private string _Word;

        private string _NormalizedWord2;
        #pragma warning restore 0649

        private EntitySet<TermLink> _TermLinkTargets;

        private EntitySet<TermLink> _TermLinkSoruces;

        private EntityRef<TermLevel> _TermLevel;

        private EntityRef<Language> _Language;

        private EntityRef<Synset> _Synset;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnLanguageIdChanging(long? value);
        partial void OnLanguageIdChanged();
        partial void OnLevelIdChanging(long? value);
        partial void OnLevelIdChanged();
        partial void OnNormalizedWordChanging(string value);
        partial void OnNormalizedWordChanged();
        partial void OnOriginalIdChanging(int? value);
        partial void OnOriginalIdChanged();
        partial void OnSynsetIdChanging(long value);
        partial void OnSynsetIdChanged();
        partial void OnUserCommentChanging(string value);
        partial void OnUserCommentChanged();
        partial void OnWordChanging(string value);
        partial void OnWordChanged();
        partial void OnNormalizedWord2Changing(string value);
        partial void OnNormalizedWord2Changed();
        #endregion

        public Term()
        {
            this._TermLinkTargets = new EntitySet<TermLink>(new Action<TermLink>(this.attach_TermLinkTargets), new Action<TermLink>(this.detach_TermLinkTargets));
            this._TermLinkSoruces = new EntitySet<TermLink>(new Action<TermLink>(this.attach_TermLinkSoruces), new Action<TermLink>(this.detach_TermLinkSoruces));
            this._TermLevel  = default(EntityRef<TermLevel>);
            this._Language  = default(EntityRef<Language>);
            this._Synset  = default(EntityRef<Synset>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LanguageId in the schema.
        /// </summary>
        [Column(Name = @"language_id", Storage = "_LanguageId", DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long? LanguageId
        {
            get
            {
                return this._LanguageId;
            }
            set
            {
                if (this._LanguageId != value)
                {
                    if (this._Language.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLanguageIdChanging(value);
                    this.SendPropertyChanging("LanguageId");
                    this._LanguageId = value;
                    this.SendPropertyChanged("LanguageId");
                    this.OnLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LevelId in the schema.
        /// </summary>
        [Column(Name = @"level_id", Storage = "_LevelId", DbType = "BIGINT(20) NULL", UpdateCheck = UpdateCheck.Never)]
        public long? LevelId
        {
            get
            {
                return this._LevelId;
            }
            set
            {
                if (this._LevelId != value)
                {
                    if (this._TermLevel.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLevelIdChanging(value);
                    this.SendPropertyChanging("LevelId");
                    this._LevelId = value;
                    this.SendPropertyChanged("LevelId");
                    this.OnLevelIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NormalizedWord in the schema.
        /// </summary>
        [Column(Name = @"normalized_word", Storage = "_NormalizedWord", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NormalizedWord
        {
            get
            {
                return this._NormalizedWord;
            }
            set
            {
                if (this._NormalizedWord != value)
                {
                    this.OnNormalizedWordChanging(value);
                    this.SendPropertyChanging("NormalizedWord");
                    this._NormalizedWord = value;
                    this.SendPropertyChanged("NormalizedWord");
                    this.OnNormalizedWordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalId in the schema.
        /// </summary>
        [Column(Name = @"original_id", Storage = "_OriginalId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? OriginalId
        {
            get
            {
                return this._OriginalId;
            }
            set
            {
                if (this._OriginalId != value)
                {
                    this.OnOriginalIdChanging(value);
                    this.SendPropertyChanging("OriginalId");
                    this._OriginalId = value;
                    this.SendPropertyChanged("OriginalId");
                    this.OnOriginalIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetId in the schema.
        /// </summary>
        [Column(Name = @"synset_id", Storage = "_SynsetId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long SynsetId
        {
            get
            {
                return this._SynsetId;
            }
            set
            {
                if (this._SynsetId != value)
                {
                    if (this._Synset.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSynsetIdChanging(value);
                    this.SendPropertyChanging("SynsetId");
                    this._SynsetId = value;
                    this.SendPropertyChanged("SynsetId");
                    this.OnSynsetIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserComment in the schema.
        /// </summary>
        [Column(Name = @"user_comment", Storage = "_UserComment", DbType = "VARCHAR(400) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserComment
        {
            get
            {
                return this._UserComment;
            }
            set
            {
                if (this._UserComment != value)
                {
                    this.OnUserCommentChanging(value);
                    this.SendPropertyChanging("UserComment");
                    this._UserComment = value;
                    this.SendPropertyChanged("UserComment");
                    this.OnUserCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Word in the schema.
        /// </summary>
        [Column(Name = @"word", Storage = "_Word", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Word
        {
            get
            {
                return this._Word;
            }
            set
            {
                if (this._Word != value)
                {
                    this.OnWordChanging(value);
                    this.SendPropertyChanging("Word");
                    this._Word = value;
                    this.SendPropertyChanged("Word");
                    this.OnWordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NormalizedWord2 in the schema.
        /// </summary>
        [Column(Name = @"normalized_word2", Storage = "_NormalizedWord2", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NormalizedWord2
        {
            get
            {
                return this._NormalizedWord2;
            }
            set
            {
                if (this._NormalizedWord2 != value)
                {
                    this.OnNormalizedWord2Changing(value);
                    this.SendPropertyChanging("NormalizedWord2");
                    this._NormalizedWord2 = value;
                    this.SendPropertyChanged("NormalizedWord2");
                    this.OnNormalizedWord2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermLinkTargets in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Term_TermLink", Storage="_TermLinkTargets", ThisKey="Id", OtherKey="TargetTermId")]
        public EntitySet<TermLink> TermLinkTargets
        {
            get
            {
                return this._TermLinkTargets;
            }
            set
            {
                this._TermLinkTargets.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for TermLinkSoruces in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Term_TermLink1", Storage="_TermLinkSoruces", ThisKey="Id", OtherKey="TermId")]
        public EntitySet<TermLink> TermLinkSoruces
        {
            get
            {
                return this._TermLinkSoruces;
            }
            set
            {
                this._TermLinkSoruces.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for TermLevel in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TermLevel_Term", Storage="_TermLevel", ThisKey="LevelId", OtherKey="Id", IsForeignKey=true)]
        public TermLevel TermLevel
        {
            get
            {
                return this._TermLevel.Entity;
            }
            set
            {
                TermLevel previousValue = this._TermLevel.Entity;
                if ((previousValue != value) || (this._TermLevel.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TermLevel");
                    if (previousValue != null)
                    {
                        this._TermLevel.Entity = null;
                        previousValue.Terms.Remove(this);
                    }
                    this._TermLevel.Entity = value;
                    if (value != null)
                    {
                        this._LevelId = value.Id;
                        value.Terms.Add(this);
                    }
                    else
                    {
                        this._LevelId = default(long?);
                    }
                    this.SendPropertyChanged("TermLevel");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Language in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Language_Term", Storage="_Language", ThisKey="LanguageId", OtherKey="Id", IsForeignKey=true)]
        public Language Language
        {
            get
            {
                return this._Language.Entity;
            }
            set
            {
                Language previousValue = this._Language.Entity;
                if ((previousValue != value) || (this._Language.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Language");
                    if (previousValue != null)
                    {
                        this._Language.Entity = null;
                        previousValue.Terms.Remove(this);
                    }
                    this._Language.Entity = value;
                    if (value != null)
                    {
                        this._LanguageId = value.Id;
                        value.Terms.Add(this);
                    }
                    else
                    {
                        this._LanguageId = default(long?);
                    }
                    this.SendPropertyChanged("Language");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Synset in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Synset_Term", Storage="_Synset", ThisKey="SynsetId", OtherKey="Id", IsForeignKey=true)]
        public Synset Synset
        {
            get
            {
                return this._Synset.Entity;
            }
            set
            {
                Synset previousValue = this._Synset.Entity;
                if ((previousValue != value) || (this._Synset.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Synset");
                    if (previousValue != null)
                    {
                        this._Synset.Entity = null;
                        previousValue.Terms.Remove(this);
                    }
                    this._Synset.Entity = value;
                    if (value != null)
                    {
                        this._SynsetId = value.Id;
                        value.Terms.Add(this);
                    }
                    else
                    {
                        this._SynsetId = default(long);
                    }
                    this.SendPropertyChanged("Synset");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_TermLinkTargets(TermLink entity)
        {
            this.SendPropertyChanging("TermLinkTargets");
            entity.TermTarget = this;
        }
    
        private void detach_TermLinkTargets(TermLink entity)
        {
            this.SendPropertyChanging("TermLinkTargets");
            entity.TermTarget = null;
        }

        private void attach_TermLinkSoruces(TermLink entity)
        {
            this.SendPropertyChanging("TermLinkSoruces");
            entity.TermSource = this;
        }
    
        private void detach_TermLinkSoruces(TermLink entity)
        {
            this.SendPropertyChanging("TermLinkSoruces");
            entity.TermSource = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.TermLevel in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.term_level")]
    public partial class TermLevel : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private string _LevelName;

        private string _ShortLevelName;

        private int? _SortValue;
        #pragma warning restore 0649

        private EntitySet<Term> _Terms;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnLevelNameChanging(string value);
        partial void OnLevelNameChanged();
        partial void OnShortLevelNameChanging(string value);
        partial void OnShortLevelNameChanged();
        partial void OnSortValueChanging(int? value);
        partial void OnSortValueChanged();
        #endregion

        public TermLevel()
        {
            this._Terms = new EntitySet<Term>(new Action<Term>(this.attach_Terms), new Action<Term>(this.detach_Terms));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL AUTO_INCREMENT", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LevelName in the schema.
        /// </summary>
        [Column(Name = @"level_name", Storage = "_LevelName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LevelName
        {
            get
            {
                return this._LevelName;
            }
            set
            {
                if (this._LevelName != value)
                {
                    this.OnLevelNameChanging(value);
                    this.SendPropertyChanging("LevelName");
                    this._LevelName = value;
                    this.SendPropertyChanged("LevelName");
                    this.OnLevelNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShortLevelName in the schema.
        /// </summary>
        [Column(Name = @"short_level_name", Storage = "_ShortLevelName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ShortLevelName
        {
            get
            {
                return this._ShortLevelName;
            }
            set
            {
                if (this._ShortLevelName != value)
                {
                    this.OnShortLevelNameChanging(value);
                    this.SendPropertyChanging("ShortLevelName");
                    this._ShortLevelName = value;
                    this.SendPropertyChanged("ShortLevelName");
                    this.OnShortLevelNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SortValue in the schema.
        /// </summary>
        [Column(Name = @"sort_value", Storage = "_SortValue", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? SortValue
        {
            get
            {
                return this._SortValue;
            }
            set
            {
                if (this._SortValue != value)
                {
                    this.OnSortValueChanging(value);
                    this.SendPropertyChanging("SortValue");
                    this._SortValue = value;
                    this.SendPropertyChanged("SortValue");
                    this.OnSortValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Terms in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TermLevel_Term", Storage="_Terms", ThisKey="Id", OtherKey="LevelId")]
        public EntitySet<Term> Terms
        {
            get
            {
                return this._Terms;
            }
            set
            {
                this._Terms.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Terms(Term entity)
        {
            this.SendPropertyChanging("Terms");
            entity.TermLevel = this;
        }
    
        private void detach_Terms(Term entity)
        {
            this.SendPropertyChanging("Terms");
            entity.TermLevel = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.TermLink in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.term_link")]
    public partial class TermLink : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private long _LinkTypeId;

        private long _TargetTermId;

        private long _TermId;
        #pragma warning restore 0649

        private EntityRef<Term> _TermTarget;

        private EntityRef<Term> _TermSource;

        private EntityRef<TermLinkType> _TermLinkType;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnLinkTypeIdChanging(long value);
        partial void OnLinkTypeIdChanged();
        partial void OnTargetTermIdChanging(long value);
        partial void OnTargetTermIdChanged();
        partial void OnTermIdChanging(long value);
        partial void OnTermIdChanged();
        #endregion

        public TermLink()
        {
            this._TermTarget  = default(EntityRef<Term>);
            this._TermSource  = default(EntityRef<Term>);
            this._TermLinkType  = default(EntityRef<TermLinkType>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LinkTypeId in the schema.
        /// </summary>
        [Column(Name = @"link_type_id", Storage = "_LinkTypeId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long LinkTypeId
        {
            get
            {
                return this._LinkTypeId;
            }
            set
            {
                if (this._LinkTypeId != value)
                {
                    if (this._TermLinkType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLinkTypeIdChanging(value);
                    this.SendPropertyChanging("LinkTypeId");
                    this._LinkTypeId = value;
                    this.SendPropertyChanged("LinkTypeId");
                    this.OnLinkTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TargetTermId in the schema.
        /// </summary>
        [Column(Name = @"target_term_id", Storage = "_TargetTermId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long TargetTermId
        {
            get
            {
                return this._TargetTermId;
            }
            set
            {
                if (this._TargetTermId != value)
                {
                    if (this._TermTarget.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTargetTermIdChanging(value);
                    this.SendPropertyChanging("TargetTermId");
                    this._TargetTermId = value;
                    this.SendPropertyChanged("TargetTermId");
                    this.OnTargetTermIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermId in the schema.
        /// </summary>
        [Column(Name = @"term_id", Storage = "_TermId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long TermId
        {
            get
            {
                return this._TermId;
            }
            set
            {
                if (this._TermId != value)
                {
                    if (this._TermSource.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTermIdChanging(value);
                    this.SendPropertyChanging("TermId");
                    this._TermId = value;
                    this.SendPropertyChanged("TermId");
                    this.OnTermIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermTarget in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Term_TermLink", Storage="_TermTarget", ThisKey="TargetTermId", OtherKey="Id", IsForeignKey=true)]
        public Term TermTarget
        {
            get
            {
                return this._TermTarget.Entity;
            }
            set
            {
                Term previousValue = this._TermTarget.Entity;
                if ((previousValue != value) || (this._TermTarget.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TermTarget");
                    if (previousValue != null)
                    {
                        this._TermTarget.Entity = null;
                        previousValue.TermLinkTargets.Remove(this);
                    }
                    this._TermTarget.Entity = value;
                    if (value != null)
                    {
                        this._TargetTermId = value.Id;
                        value.TermLinkTargets.Add(this);
                    }
                    else
                    {
                        this._TargetTermId = default(long);
                    }
                    this.SendPropertyChanged("TermTarget");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermSource in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Term_TermLink1", Storage="_TermSource", ThisKey="TermId", OtherKey="Id", IsForeignKey=true)]
        public Term TermSource
        {
            get
            {
                return this._TermSource.Entity;
            }
            set
            {
                Term previousValue = this._TermSource.Entity;
                if ((previousValue != value) || (this._TermSource.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TermSource");
                    if (previousValue != null)
                    {
                        this._TermSource.Entity = null;
                        previousValue.TermLinkSoruces.Remove(this);
                    }
                    this._TermSource.Entity = value;
                    if (value != null)
                    {
                        this._TermId = value.Id;
                        value.TermLinkSoruces.Add(this);
                    }
                    else
                    {
                        this._TermId = default(long);
                    }
                    this.SendPropertyChanged("TermSource");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermLinkType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TermLinkType_TermLink", Storage="_TermLinkType", ThisKey="LinkTypeId", OtherKey="Id", IsForeignKey=true)]
        public TermLinkType TermLinkType
        {
            get
            {
                return this._TermLinkType.Entity;
            }
            set
            {
                TermLinkType previousValue = this._TermLinkType.Entity;
                if ((previousValue != value) || (this._TermLinkType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TermLinkType");
                    if (previousValue != null)
                    {
                        this._TermLinkType.Entity = null;
                        previousValue.TermLinks.Remove(this);
                    }
                    this._TermLinkType.Entity = value;
                    if (value != null)
                    {
                        this._LinkTypeId = value.Id;
                        value.TermLinks.Add(this);
                    }
                    else
                    {
                        this._LinkTypeId = default(long);
                    }
                    this.SendPropertyChanged("TermLinkType");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.TermLinkType in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.term_link_type")]
    public partial class TermLinkType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Version;

        private string _LinkName;

        private string _OtherDirectionLinkName;

        private string _VerbName;
        #pragma warning restore 0649

        private EntitySet<TermLink> _TermLinks;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();
        partial void OnLinkNameChanging(string value);
        partial void OnLinkNameChanged();
        partial void OnOtherDirectionLinkNameChanging(string value);
        partial void OnOtherDirectionLinkNameChanged();
        partial void OnVerbNameChanging(string value);
        partial void OnVerbNameChanged();
        #endregion

        public TermLinkType()
        {
            this._TermLinks = new EntitySet<TermLink>(new Action<TermLink>(this.attach_TermLinks), new Action<TermLink>(this.detach_TermLinks));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT(20) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [Column(Name = @"version", Storage = "_Version", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging("Version");
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LinkName in the schema.
        /// </summary>
        [Column(Name = @"link_name", Storage = "_LinkName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LinkName
        {
            get
            {
                return this._LinkName;
            }
            set
            {
                if (this._LinkName != value)
                {
                    this.OnLinkNameChanging(value);
                    this.SendPropertyChanging("LinkName");
                    this._LinkName = value;
                    this.SendPropertyChanged("LinkName");
                    this.OnLinkNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OtherDirectionLinkName in the schema.
        /// </summary>
        [Column(Name = @"other_direction_link_name", Storage = "_OtherDirectionLinkName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string OtherDirectionLinkName
        {
            get
            {
                return this._OtherDirectionLinkName;
            }
            set
            {
                if (this._OtherDirectionLinkName != value)
                {
                    this.OnOtherDirectionLinkNameChanging(value);
                    this.SendPropertyChanging("OtherDirectionLinkName");
                    this._OtherDirectionLinkName = value;
                    this.SendPropertyChanged("OtherDirectionLinkName");
                    this.OnOtherDirectionLinkNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VerbName in the schema.
        /// </summary>
        [Column(Name = @"verb_name", Storage = "_VerbName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string VerbName
        {
            get
            {
                return this._VerbName;
            }
            set
            {
                if (this._VerbName != value)
                {
                    this.OnVerbNameChanging(value);
                    this.SendPropertyChanging("VerbName");
                    this._VerbName = value;
                    this.SendPropertyChanged("VerbName");
                    this.OnVerbNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TermLinks in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TermLinkType_TermLink", Storage="_TermLinks", ThisKey="Id", OtherKey="LinkTypeId")]
        public EntitySet<TermLink> TermLinks
        {
            get
            {
                return this._TermLinks;
            }
            set
            {
                this._TermLinks.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_TermLinks(TermLink entity)
        {
            this.SendPropertyChanging("TermLinks");
            entity.TermLinkType = this;
        }
    
        private void detach_TermLinks(TermLink entity)
        {
            this.SendPropertyChanging("TermLinks");
            entity.TermLinkType = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Extern.OpenThesaurus.Db.TermTag in the schema.
    /// </summary>
    [Table(Name = @"openthesaurus.term_tag")]
    public partial class TermTag
    {
        #pragma warning disable 0649

        private long _TermTagsId;

        private long _TagId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTermTagsIdChanging(long value);
        partial void OnTermTagsIdChanged();
        partial void OnTagIdChanging(long value);
        partial void OnTagIdChanged();
        #endregion

        public TermTag()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TermTagsId in the schema.
        /// </summary>
        [Column(Name = @"term_tags_id", Storage = "_TermTagsId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long TermTagsId
        {
            get
            {
                return this._TermTagsId;
            }
            set
            {
                if (this._TermTagsId != value)
                {
                    this._TermTagsId = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TagId in the schema.
        /// </summary>
        [Column(Name = @"tag_id", Storage = "_TagId", CanBeNull = false, DbType = "BIGINT(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long TagId
        {
            get
            {
                return this._TagId;
            }
            set
            {
                if (this._TagId != value)
                {
                    this._TagId = value;
                }
            }
        }
    }

    /// <summary>
    /// Mapping Vollform nach Grundform aus Morphy
    /// </summary>
    [Table(Name = @"openthesaurus.word_mapping")]
    public partial class WordMapping
    {
        #pragma warning disable 0649

        private string _Fullform;

        private string _Baseform;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFullformChanging(string value);
        partial void OnFullformChanged();
        partial void OnBaseformChanging(string value);
        partial void OnBaseformChanged();
        #endregion

        public WordMapping()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Fullform in the schema.
        /// </summary>
        [Column(Name = @"fullform", Storage = "_Fullform", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Fullform
        {
            get
            {
                return this._Fullform;
            }
            set
            {
                if (this._Fullform != value)
                {
                    this._Fullform = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Baseform in the schema.
        /// </summary>
        [Column(Name = @"baseform", Storage = "_Baseform", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Baseform
        {
            get
            {
                return this._Baseform;
            }
            set
            {
                if (this._Baseform != value)
                {
                    this._Baseform = value;
                }
            }
        }
    }

}
