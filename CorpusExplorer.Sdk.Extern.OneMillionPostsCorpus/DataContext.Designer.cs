//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 26.06.2018 19:22:57
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;

namespace CorpusExplorer.Sdk.Extern.OneMillionPostsCorpus
{
  [Database(Name = "main")]
  [Provider(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
  public partial class MainDataContext : Devart.Data.Linq.DataContext
  {
    public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(MainDataContext));
    private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

    #region Extensibility Method Definitions
    
    partial void OnCreated();
    partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertAnnotation(Annotation instance);
    partial void UpdateAnnotation(Annotation instance);
    partial void DeleteAnnotation(Annotation instance);
    partial void InsertAnnotationsConsolidated(AnnotationsConsolidated instance);
    partial void UpdateAnnotationsConsolidated(AnnotationsConsolidated instance);
    partial void DeleteAnnotationsConsolidated(AnnotationsConsolidated instance);
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertCrossValSplit(CrossValSplit instance);
    partial void UpdateCrossValSplit(CrossValSplit instance);
    partial void DeleteCrossValSplit(CrossValSplit instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertNewspaperStaff(NewspaperStaff instance);
    partial void UpdateNewspaperStaff(NewspaperStaff instance);
    partial void DeleteNewspaperStaff(NewspaperStaff instance);

    #endregion

    public MainDataContext() :
      base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
    {
      OnCreated();
    }

    public MainDataContext(MappingSource mappingSource) :
      base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
    {
      OnCreated();
    }

    private static string GetConnectionString(string connectionStringName)
    {
      System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
      if (connectionStringSettings == null)
        throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
      return connectionStringSettings.ConnectionString;
    }

    public MainDataContext(string connection) :
      base(connection, mappingSource)
    {
      OnCreated();
    }

    public MainDataContext(System.Data.IDbConnection connection) :
      base(connection, mappingSource)
    {
      OnCreated();
    }

    public MainDataContext(string connection, MappingSource mappingSource) :
      base(connection, mappingSource)
    {
      OnCreated();
    }

    public MainDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
      base(connection, mappingSource)
    {
      OnCreated();
    }

    public Devart.Data.Linq.Table<Post> Posts
    {
      get
      {
        return this.GetTable<Post>();
      }
    }

    public Devart.Data.Linq.Table<Annotation> Annotations
    {
      get
      {
        return this.GetTable<Annotation>();
      }
    }

    public Devart.Data.Linq.Table<AnnotationsConsolidated> AnnotationsConsolidateds
    {
      get
      {
        return this.GetTable<AnnotationsConsolidated>();
      }
    }

    public Devart.Data.Linq.Table<Article> Articles
    {
      get
      {
        return this.GetTable<Article>();
      }
    }

    public Devart.Data.Linq.Table<CrossValSplit> CrossValSplits
    {
      get
      {
        return this.GetTable<CrossValSplit>();
      }
    }

    public Devart.Data.Linq.Table<Category> Categories
    {
      get
      {
        return this.GetTable<Category>();
      }
    }

    public Devart.Data.Linq.Table<NewspaperStaff> NewspaperStaffs
    {
      get
      {
        return this.GetTable<NewspaperStaff>();
      }
    }
  }

  /// <summary>
  /// There are no comments for MainContext.Post in the schema.
  /// </summary>
  [Table(Name = @"""main"".Posts")]
  public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
  {

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
#pragma warning disable 0649

    private long _IDPost;

    private System.Nullable<long> _IDParentPost;

    private long _IDArticle;

    private long _IDUser;

    private System.DateTime _CreatedAt;

    private string _Status;

    private string _Headline;

    private string _Body;

    private long _PositiveVotes;

    private long _NegativeVotes;
#pragma warning restore 0649

    private EntitySet<Post> _Posts;

    private EntityRef<Post> _ParentPost;

    private EntityRef<NewspaperStaff> _NewspaperStaff;

    private EntityRef<Article> _Article;

    private EntityRef<CrossValSplit> _CrossValSplit;

    private EntitySet<AnnotationsConsolidated> _AnnotationsConsolidated;

    private EntitySet<Annotation> _Annotations;
    
    #region Extensibility Method Definitions

    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDPostChanging(long value);
    partial void OnIDPostChanged();
    partial void OnIDParentPostChanging(System.Nullable<long> value);
    partial void OnIDParentPostChanged();
    partial void OnIDArticleChanging(long value);
    partial void OnIDArticleChanged();
    partial void OnIDUserChanging(long value);
    partial void OnIDUserChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnHeadlineChanging(string value);
    partial void OnHeadlineChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnPositiveVotesChanging(long value);
    partial void OnPositiveVotesChanged();
    partial void OnNegativeVotesChanging(long value);
    partial void OnNegativeVotesChanged();
    #endregion

    public Post()
    {
      this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
      this._ParentPost  = default(EntityRef<Post>);
      this._NewspaperStaff  = default(EntityRef<NewspaperStaff>);
      this._Article  = default(EntityRef<Article>);
      this._CrossValSplit  = default(EntityRef<CrossValSplit>);
      this._AnnotationsConsolidated = new EntitySet<AnnotationsConsolidated>(new Action<AnnotationsConsolidated>(this.attach_AnnotationsConsolidated), new Action<AnnotationsConsolidated>(this.detach_AnnotationsConsolidated));
      this._Annotations = new EntitySet<Annotation>(new Action<Annotation>(this.attach_Annotations), new Action<Annotation>(this.detach_Annotations));
      OnCreated();
    }

    
    /// <summary>
    /// There are no comments for IDPost in the schema.
    /// </summary>
    [Column(Name = @"ID_Post", Storage = "_IDPost", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
    public long IDPost
    {
      get
      {
        return this._IDPost;
      }
    }

    
    /// <summary>
    /// There are no comments for IDParentPost in the schema.
    /// </summary>
    [Column(Name = @"ID_Parent_Post", Storage = "_IDParentPost", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
    public System.Nullable<long> IDParentPost
    {
      get
      {
        return this._IDParentPost;
      }
      set
      {
        if (this._IDParentPost != value)
        {
          if (this._ParentPost.HasLoadedOrAssignedValue)
          {
            throw new ForeignKeyReferenceAlreadyHasValueException();
          }

          this.OnIDParentPostChanging(value);
          this.SendPropertyChanging("IDParentPost");
          this._IDParentPost = value;
          this.SendPropertyChanged("IDParentPost");
          this.OnIDParentPostChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for IDArticle in the schema.
    /// </summary>
    [Column(Name = @"ID_Article", Storage = "_IDArticle", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
    public long IDArticle
    {
      get
      {
        return this._IDArticle;
      }
      set
      {
        if (this._IDArticle != value)
        {
          if (this._Article.HasLoadedOrAssignedValue)
          {
            throw new ForeignKeyReferenceAlreadyHasValueException();
          }

          this.OnIDArticleChanging(value);
          this.SendPropertyChanging("IDArticle");
          this._IDArticle = value;
          this.SendPropertyChanged("IDArticle");
          this.OnIDArticleChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for IDUser in the schema.
    /// </summary>
    [Column(Name = @"ID_User", Storage = "_IDUser", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
    public long IDUser
    {
      get
      {
        return this._IDUser;
      }
      set
      {
        if (this._IDUser != value)
        {
          if (this._NewspaperStaff.HasLoadedOrAssignedValue)
          {
            throw new ForeignKeyReferenceAlreadyHasValueException();
          }

          this.OnIDUserChanging(value);
          this.SendPropertyChanging("IDUser");
          this._IDUser = value;
          this.SendPropertyChanged("IDUser");
          this.OnIDUserChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for CreatedAt in the schema.
    /// </summary>
    [Column(Storage = "_CreatedAt", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
    public System.DateTime CreatedAt
    {
      get
      {
        return this._CreatedAt;
      }
      set
      {
        if (this._CreatedAt != value)
        {
          this.OnCreatedAtChanging(value);
          this.SendPropertyChanging("CreatedAt");
          this._CreatedAt = value;
          this.SendPropertyChanged("CreatedAt");
          this.OnCreatedAtChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Status in the schema.
    /// </summary>
    [Column(Storage = "_Status", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
    public string Status
    {
      get
      {
        return this._Status;
      }
      set
      {
        if (this._Status != value)
        {
          this.OnStatusChanging(value);
          this.SendPropertyChanging("Status");
          this._Status = value;
          this.SendPropertyChanged("Status");
          this.OnStatusChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Headline in the schema.
    /// </summary>
    [Column(Storage = "_Headline", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
    public string Headline
    {
      get
      {
        return this._Headline;
      }
      set
      {
        if (this._Headline != value)
        {
          this.OnHeadlineChanging(value);
          this.SendPropertyChanging("Headline");
          this._Headline = value;
          this.SendPropertyChanged("Headline");
          this.OnHeadlineChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Body in the schema.
    /// </summary>
    [Column(Storage = "_Body", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
    public string Body
    {
      get
      {
        return this._Body;
      }
      set
      {
        if (this._Body != value)
        {
          this.OnBodyChanging(value);
          this.SendPropertyChanging("Body");
          this._Body = value;
          this.SendPropertyChanged("Body");
          this.OnBodyChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for PositiveVotes in the schema.
    /// </summary>
    [Column(Storage = "_PositiveVotes", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
    public long PositiveVotes
    {
      get
      {
        return this._PositiveVotes;
      }
      set
      {
        if (this._PositiveVotes != value)
        {
          this.OnPositiveVotesChanging(value);
          this.SendPropertyChanging("PositiveVotes");
          this._PositiveVotes = value;
          this.SendPropertyChanged("PositiveVotes");
          this.OnPositiveVotesChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for NegativeVotes in the schema.
    /// </summary>
    [Column(Storage = "_NegativeVotes", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
    public long NegativeVotes
    {
      get
      {
        return this._NegativeVotes;
      }
      set
      {
        if (this._NegativeVotes != value)
        {
          this.OnNegativeVotesChanging(value);
          this.SendPropertyChanging("NegativeVotes");
          this._NegativeVotes = value;
          this.SendPropertyChanged("NegativeVotes");
          this.OnNegativeVotesChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Posts in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Post_Post", Storage="_Posts", ThisKey="IDPost", OtherKey="IDParentPost")]
    public EntitySet<Post> Posts
    {
      get
      {
        return this._Posts;
      }
      set
      {
        this._Posts.Assign(value);
      }
    }

    
    /// <summary>
    /// There are no comments for ParentPost in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Post_Post", Storage="_ParentPost", ThisKey="IDParentPost", OtherKey="IDPost", IsForeignKey=true)]
    public Post ParentPost
    {
      get
      {
        return this._ParentPost.Entity;
      }
      set
      {
        Post previousValue = this._ParentPost.Entity;
        if ((previousValue != value) || (this._ParentPost.HasLoadedOrAssignedValue == false))
        {
          this.SendPropertyChanging("ParentPost");
          if (previousValue != null)
          {
            this._ParentPost.Entity = null;
            previousValue.Posts.Remove(this);
          }
          this._ParentPost.Entity = value;
          if (value != null)
          {
            this._IDParentPost = value.IDPost;
            value.Posts.Add(this);
          }
          else
          {
            this._IDParentPost = default(System.Nullable<long>);
          }
          this.SendPropertyChanged("ParentPost");
        }
      }
    }

    
    /// <summary>
    /// There are no comments for NewspaperStaff in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="NewspaperStaff_Post", Storage="_NewspaperStaff", ThisKey="IDUser", OtherKey="IDUser", IsForeignKey=true)]
    public NewspaperStaff NewspaperStaff
    {
      get
      {
        return this._NewspaperStaff.Entity;
      }
      set
      {
        NewspaperStaff previousValue = this._NewspaperStaff.Entity;
        if ((previousValue != value) || (this._NewspaperStaff.HasLoadedOrAssignedValue == false))
        {
          this.SendPropertyChanging("NewspaperStaff");
          if (previousValue != null)
          {
            this._NewspaperStaff.Entity = null;
            previousValue.Posts.Remove(this);
          }
          this._NewspaperStaff.Entity = value;
          if (value != null)
          {
            this._IDUser = value.IDUser;
            value.Posts.Add(this);
          }
          else
          {
            this._IDUser = default(long);
          }
          this.SendPropertyChanged("NewspaperStaff");
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Article in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Article_Post", Storage="_Article", ThisKey="IDArticle", OtherKey="IDArticle", IsForeignKey=true)]
    public Article Article
    {
      get
      {
        return this._Article.Entity;
      }
      set
      {
        Article previousValue = this._Article.Entity;
        if ((previousValue != value) || (this._Article.HasLoadedOrAssignedValue == false))
        {
          this.SendPropertyChanging("Article");
          if (previousValue != null)
          {
            this._Article.Entity = null;
            previousValue.Posts.Remove(this);
          }
          this._Article.Entity = value;
          if (value != null)
          {
            this._IDArticle = value.IDArticle;
            value.Posts.Add(this);
          }
          else
          {
            this._IDArticle = default(long);
          }
          this.SendPropertyChanged("Article");
        }
      }
    }

    
    /// <summary>
    /// There are no comments for CrossValSplit in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="CrossValSplit_Post", Storage="_CrossValSplit", ThisKey="IDPost", OtherKey="IDPost", IsForeignKey=true)]
    public CrossValSplit CrossValSplit
    {
      get
      {
        return this._CrossValSplit.Entity;
      }
      set
      {
        CrossValSplit previousValue = this._CrossValSplit.Entity;
        if ((previousValue != value) || (this._CrossValSplit.HasLoadedOrAssignedValue == false))
        {
          this.SendPropertyChanging("CrossValSplit");
          if (previousValue != null)
          {
            this._CrossValSplit.Entity = null;
            previousValue.Post = null;
          }
          this._CrossValSplit.Entity = value;
          if (value != null)
          {
            this._IDPost = value.IDPost;
            value.Post = this;
          }
          else
          {
            this._IDPost = default(long);
          }
          this.SendPropertyChanged("CrossValSplit");
        }
      }
    }

    
    /// <summary>
    /// There are no comments for AnnotationsConsolidated in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Post_AnnotationsConsolidated", Storage="_AnnotationsConsolidated", ThisKey="IDPost", OtherKey="IDPost")]
    public EntitySet<AnnotationsConsolidated> AnnotationsConsolidated
    {
      get
      {
        return this._AnnotationsConsolidated;
      }
      set
      {
        this._AnnotationsConsolidated.Assign(value);
      }
    }

    
    /// <summary>
    /// There are no comments for Annotations in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Post_Annotation", Storage="_Annotations", ThisKey="IDPost", OtherKey="IDPost")]
    public EntitySet<Annotation> Annotations
    {
      get
      {
        return this._Annotations;
      }
      set
      {
        this._Annotations.Assign(value);
      }
    }
   
    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanging(System.String propertyName) 
    {    
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, new PropertyChangingEventArgs(propertyName));
    }

    protected virtual void SendPropertyChanged(System.String propertyName)
    {    
      var handler = this.PropertyChanged;
      if (handler != null)
        handler(this, new PropertyChangedEventArgs(propertyName));
    }

    private void attach_Posts(Post entity)
    {
      this.SendPropertyChanging("Posts");
      entity.ParentPost = this;
    }
    
    private void detach_Posts(Post entity)
    {
      this.SendPropertyChanging("Posts");
      entity.ParentPost = null;
    }

    private void attach_AnnotationsConsolidated(AnnotationsConsolidated entity)
    {
      this.SendPropertyChanging("AnnotationsConsolidated");
      entity.Post = this;
    }
    
    private void detach_AnnotationsConsolidated(AnnotationsConsolidated entity)
    {
      this.SendPropertyChanging("AnnotationsConsolidated");
      entity.Post = null;
    }

    private void attach_Annotations(Annotation entity)
    {
      this.SendPropertyChanging("Annotations");
      entity.Post = this;
    }
    
    private void detach_Annotations(Annotation entity)
    {
      this.SendPropertyChanging("Annotations");
      entity.Post = null;
    }
  }

  /// <summary>
  /// There are no comments for MainContext.Annotation in the schema.
  /// </summary>
  [Table(Name = @"""main"".Annotations")]
  public partial class Annotation : INotifyPropertyChanging, INotifyPropertyChanged
  {

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
#pragma warning disable 0649

    private long _IDPost;

    private long _IDAnnotator;

    private string _Category;

    private long _Value;
#pragma warning restore 0649

    private EntityRef<Category> _CategoryObject;

    private EntityRef<Post> _Post;
    
    #region Extensibility Method Definitions

    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDPostChanging(long value);
    partial void OnIDPostChanged();
    partial void OnIDAnnotatorChanging(long value);
    partial void OnIDAnnotatorChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnValueChanging(long value);
    partial void OnValueChanged();
    #endregion

    public Annotation()
    {
      this._CategoryObject  = default(EntityRef<Category>);
      this._Post  = default(EntityRef<Post>);
      OnCreated();
    }

    
    /// <summary>
    /// There are no comments for IDPost in the schema.
    /// </summary>
    [Column(Name = @"ID_Post", Storage = "_IDPost", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
    public long IDPost
    {
      get
      {
        return this._IDPost;
      }
      set
      {
        if (this._IDPost != value)
        {
          if (this._Post.HasLoadedOrAssignedValue)
          {
            throw new ForeignKeyReferenceAlreadyHasValueException();
          }

          this.OnIDPostChanging(value);
          this.SendPropertyChanging("IDPost");
          this._IDPost = value;
          this.SendPropertyChanged("IDPost");
          this.OnIDPostChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for IDAnnotator in the schema.
    /// </summary>
    [Column(Name = @"ID_Annotator", Storage = "_IDAnnotator", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
    public long IDAnnotator
    {
      get
      {
        return this._IDAnnotator;
      }
      set
      {
        if (this._IDAnnotator != value)
        {
          this.OnIDAnnotatorChanging(value);
          this.SendPropertyChanging("IDAnnotator");
          this._IDAnnotator = value;
          this.SendPropertyChanged("IDAnnotator");
          this.OnIDAnnotatorChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Category in the schema.
    /// </summary>
    [Column(Storage = "_Category", CanBeNull = false, DbType = "TEXT NOT NULL", IsPrimaryKey = true)]
    public string Category
    {
      get
      {
        return this._Category;
      }
      set
      {
        if (this._Category != value)
        {
          if (this._CategoryObject.HasLoadedOrAssignedValue)
          {
            throw new ForeignKeyReferenceAlreadyHasValueException();
          }

          this.OnCategoryChanging(value);
          this.SendPropertyChanging("Category");
          this._Category = value;
          this.SendPropertyChanged("Category");
          this.OnCategoryChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Value in the schema.
    /// </summary>
    [Column(Storage = "_Value", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
    public long Value
    {
      get
      {
        return this._Value;
      }
      set
      {
        if (this._Value != value)
        {
          this.OnValueChanging(value);
          this.SendPropertyChanging("Value");
          this._Value = value;
          this.SendPropertyChanged("Value");
          this.OnValueChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for CategoryObject in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Category_Annotation", Storage="_CategoryObject", ThisKey="Category", OtherKey="Name", IsForeignKey=true)]
    public Category CategoryObject
    {
      get
      {
        return this._CategoryObject.Entity;
      }
      set
      {
        Category previousValue = this._CategoryObject.Entity;
        if ((previousValue != value) || (this._CategoryObject.HasLoadedOrAssignedValue == false))
        {
          this.SendPropertyChanging("CategoryObject");
          if (previousValue != null)
          {
            this._CategoryObject.Entity = null;
            previousValue.Annotations.Remove(this);
          }
          this._CategoryObject.Entity = value;
          if (value != null)
          {
            this._Category = value.Name;
            value.Annotations.Add(this);
          }
          else
          {
            this._Category = default(string);
          }
          this.SendPropertyChanged("CategoryObject");
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Post in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Post_Annotation", Storage="_Post", ThisKey="IDPost", OtherKey="IDPost", IsForeignKey=true)]
    public Post Post
    {
      get
      {
        return this._Post.Entity;
      }
      set
      {
        Post previousValue = this._Post.Entity;
        if ((previousValue != value) || (this._Post.HasLoadedOrAssignedValue == false))
        {
          this.SendPropertyChanging("Post");
          if (previousValue != null)
          {
            this._Post.Entity = null;
            previousValue.Annotations.Remove(this);
          }
          this._Post.Entity = value;
          if (value != null)
          {
            this._IDPost = value.IDPost;
            value.Annotations.Add(this);
          }
          else
          {
            this._IDPost = default(long);
          }
          this.SendPropertyChanged("Post");
        }
      }
    }
   
    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanging(System.String propertyName) 
    {    
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, new PropertyChangingEventArgs(propertyName));
    }

    protected virtual void SendPropertyChanged(System.String propertyName)
    {    
      var handler = this.PropertyChanged;
      if (handler != null)
        handler(this, new PropertyChangedEventArgs(propertyName));
    }
  }

  /// <summary>
  /// There are no comments for MainContext.AnnotationsConsolidated in the schema.
  /// </summary>
  [Table(Name = @"""main"".Annotations_consolidated")]
  public partial class AnnotationsConsolidated : INotifyPropertyChanging, INotifyPropertyChanged
  {

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
#pragma warning disable 0649

    private long _IDPost;

    private string _Category;

    private long _Value;
#pragma warning restore 0649

    private EntityRef<Post> _Post;

    private EntityRef<Category> _CategoryObject;
    
    #region Extensibility Method Definitions

    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDPostChanging(long value);
    partial void OnIDPostChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnValueChanging(long value);
    partial void OnValueChanged();
    #endregion

    public AnnotationsConsolidated()
    {
      this._Post  = default(EntityRef<Post>);
      this._CategoryObject  = default(EntityRef<Category>);
      OnCreated();
    }

    
    /// <summary>
    /// There are no comments for IDPost in the schema.
    /// </summary>
    [Column(Name = @"ID_Post", Storage = "_IDPost", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
    public long IDPost
    {
      get
      {
        return this._IDPost;
      }
      set
      {
        if (this._IDPost != value)
        {
          if (this._Post.HasLoadedOrAssignedValue)
          {
            throw new ForeignKeyReferenceAlreadyHasValueException();
          }

          this.OnIDPostChanging(value);
          this.SendPropertyChanging("IDPost");
          this._IDPost = value;
          this.SendPropertyChanged("IDPost");
          this.OnIDPostChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Category in the schema.
    /// </summary>
    [Column(Storage = "_Category", CanBeNull = false, DbType = "TEXT NOT NULL", IsPrimaryKey = true)]
    public string Category
    {
      get
      {
        return this._Category;
      }
      set
      {
        if (this._Category != value)
        {
          if (this._CategoryObject.HasLoadedOrAssignedValue)
          {
            throw new ForeignKeyReferenceAlreadyHasValueException();
          }

          this.OnCategoryChanging(value);
          this.SendPropertyChanging("Category");
          this._Category = value;
          this.SendPropertyChanged("Category");
          this.OnCategoryChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Value in the schema.
    /// </summary>
    [Column(Storage = "_Value", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
    public long Value
    {
      get
      {
        return this._Value;
      }
      set
      {
        if (this._Value != value)
        {
          this.OnValueChanging(value);
          this.SendPropertyChanging("Value");
          this._Value = value;
          this.SendPropertyChanged("Value");
          this.OnValueChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Post in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Post_AnnotationsConsolidated", Storage="_Post", ThisKey="IDPost", OtherKey="IDPost", IsForeignKey=true)]
    public Post Post
    {
      get
      {
        return this._Post.Entity;
      }
      set
      {
        Post previousValue = this._Post.Entity;
        if ((previousValue != value) || (this._Post.HasLoadedOrAssignedValue == false))
        {
          this.SendPropertyChanging("Post");
          if (previousValue != null)
          {
            this._Post.Entity = null;
            previousValue.AnnotationsConsolidated.Remove(this);
          }
          this._Post.Entity = value;
          if (value != null)
          {
            this._IDPost = value.IDPost;
            value.AnnotationsConsolidated.Add(this);
          }
          else
          {
            this._IDPost = default(long);
          }
          this.SendPropertyChanged("Post");
        }
      }
    }

    
    /// <summary>
    /// There are no comments for CategoryObject in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Category_AnnotationsConsolidated", Storage="_CategoryObject", ThisKey="Category", OtherKey="Name", IsForeignKey=true)]
    public Category CategoryObject
    {
      get
      {
        return this._CategoryObject.Entity;
      }
      set
      {
        Category previousValue = this._CategoryObject.Entity;
        if ((previousValue != value) || (this._CategoryObject.HasLoadedOrAssignedValue == false))
        {
          this.SendPropertyChanging("CategoryObject");
          if (previousValue != null)
          {
            this._CategoryObject.Entity = null;
            previousValue.AnnotationsConsolidateds.Remove(this);
          }
          this._CategoryObject.Entity = value;
          if (value != null)
          {
            this._Category = value.Name;
            value.AnnotationsConsolidateds.Add(this);
          }
          else
          {
            this._Category = default(string);
          }
          this.SendPropertyChanged("CategoryObject");
        }
      }
    }
   
    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanging(System.String propertyName) 
    {    
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, new PropertyChangingEventArgs(propertyName));
    }

    protected virtual void SendPropertyChanged(System.String propertyName)
    {    
      var handler = this.PropertyChanged;
      if (handler != null)
        handler(this, new PropertyChangedEventArgs(propertyName));
    }
  }

  /// <summary>
  /// There are no comments for MainContext.Article in the schema.
  /// </summary>
  [Table(Name = @"""main"".Articles")]
  public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
  {

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
#pragma warning disable 0649

    private long _IDArticle;

    private string _Path;

    private System.DateTime _PublishingDate;

    private string _Title;

    private string _Body;
#pragma warning restore 0649

    private EntitySet<Post> _Posts;
    
    #region Extensibility Method Definitions

    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDArticleChanging(long value);
    partial void OnIDArticleChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnPublishingDateChanging(System.DateTime value);
    partial void OnPublishingDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    #endregion

    public Article()
    {
      this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
      OnCreated();
    }

    
    /// <summary>
    /// There are no comments for IDArticle in the schema.
    /// </summary>
    [Column(Name = @"ID_Article", Storage = "_IDArticle", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
    public long IDArticle
    {
      get
      {
        return this._IDArticle;
      }
    }

    
    /// <summary>
    /// There are no comments for Path in the schema.
    /// </summary>
    [Column(Storage = "_Path", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
    public string Path
    {
      get
      {
        return this._Path;
      }
      set
      {
        if (this._Path != value)
        {
          this.OnPathChanging(value);
          this.SendPropertyChanging("Path");
          this._Path = value;
          this.SendPropertyChanged("Path");
          this.OnPathChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for PublishingDate in the schema.
    /// </summary>
    [Column(Name = @"publishingDate", Storage = "_PublishingDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
    public System.DateTime PublishingDate
    {
      get
      {
        return this._PublishingDate;
      }
      set
      {
        if (this._PublishingDate != value)
        {
          this.OnPublishingDateChanging(value);
          this.SendPropertyChanging("PublishingDate");
          this._PublishingDate = value;
          this.SendPropertyChanged("PublishingDate");
          this.OnPublishingDateChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Title in the schema.
    /// </summary>
    [Column(Storage = "_Title", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
    public string Title
    {
      get
      {
        return this._Title;
      }
      set
      {
        if (this._Title != value)
        {
          this.OnTitleChanging(value);
          this.SendPropertyChanging("Title");
          this._Title = value;
          this.SendPropertyChanged("Title");
          this.OnTitleChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Body in the schema.
    /// </summary>
    [Column(Storage = "_Body", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
    public string Body
    {
      get
      {
        return this._Body;
      }
      set
      {
        if (this._Body != value)
        {
          this.OnBodyChanging(value);
          this.SendPropertyChanging("Body");
          this._Body = value;
          this.SendPropertyChanged("Body");
          this.OnBodyChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Posts in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Article_Post", Storage="_Posts", ThisKey="IDArticle", OtherKey="IDArticle")]
    public EntitySet<Post> Posts
    {
      get
      {
        return this._Posts;
      }
      set
      {
        this._Posts.Assign(value);
      }
    }
   
    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanging(System.String propertyName) 
    {    
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, new PropertyChangingEventArgs(propertyName));
    }

    protected virtual void SendPropertyChanged(System.String propertyName)
    {    
      var handler = this.PropertyChanged;
      if (handler != null)
        handler(this, new PropertyChangedEventArgs(propertyName));
    }

    private void attach_Posts(Post entity)
    {
      this.SendPropertyChanging("Posts");
      entity.Article = this;
    }
    
    private void detach_Posts(Post entity)
    {
      this.SendPropertyChanging("Posts");
      entity.Article = null;
    }
  }

  /// <summary>
  /// There are no comments for MainContext.CrossValSplit in the schema.
  /// </summary>
  [Table(Name = @"""main"".CrossValSplit")]
  public partial class CrossValSplit : INotifyPropertyChanging, INotifyPropertyChanged
  {

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
#pragma warning disable 0649

    private long _IDPost;

    private string _Category;

    private long _Fold;
#pragma warning restore 0649

    private EntityRef<Category> _CategoryObject;

    private EntityRef<Post> _Post;
    
    #region Extensibility Method Definitions

    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDPostChanging(long value);
    partial void OnIDPostChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnFoldChanging(long value);
    partial void OnFoldChanged();
    #endregion

    public CrossValSplit()
    {
      this._CategoryObject  = default(EntityRef<Category>);
      this._Post  = default(EntityRef<Post>);
      OnCreated();
    }

    
    /// <summary>
    /// There are no comments for IDPost in the schema.
    /// </summary>
    [Column(Name = @"ID_Post", Storage = "_IDPost", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
    public long IDPost
    {
      get
      {
        return this._IDPost;
      }
      set
      {
        if (this._IDPost != value)
        {
          if (this._Post.HasLoadedOrAssignedValue)
          {
            throw new ForeignKeyReferenceAlreadyHasValueException();
          }

          this.OnIDPostChanging(value);
          this.SendPropertyChanging("IDPost");
          this._IDPost = value;
          this.SendPropertyChanged("IDPost");
          this.OnIDPostChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Category in the schema.
    /// </summary>
    [Column(Storage = "_Category", CanBeNull = false, DbType = "TEXT NOT NULL", IsPrimaryKey = true)]
    public string Category
    {
      get
      {
        return this._Category;
      }
      set
      {
        if (this._Category != value)
        {
          if (this._CategoryObject.HasLoadedOrAssignedValue)
          {
            throw new ForeignKeyReferenceAlreadyHasValueException();
          }

          this.OnCategoryChanging(value);
          this.SendPropertyChanging("Category");
          this._Category = value;
          this.SendPropertyChanged("Category");
          this.OnCategoryChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Fold in the schema.
    /// </summary>
    [Column(Storage = "_Fold", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
    public long Fold
    {
      get
      {
        return this._Fold;
      }
      set
      {
        if (this._Fold != value)
        {
          this.OnFoldChanging(value);
          this.SendPropertyChanging("Fold");
          this._Fold = value;
          this.SendPropertyChanged("Fold");
          this.OnFoldChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for CategoryObject in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Category_CrossValSplit", Storage="_CategoryObject", ThisKey="Category", OtherKey="Name", IsForeignKey=true)]
    public Category CategoryObject
    {
      get
      {
        return this._CategoryObject.Entity;
      }
      set
      {
        Category previousValue = this._CategoryObject.Entity;
        if ((previousValue != value) || (this._CategoryObject.HasLoadedOrAssignedValue == false))
        {
          this.SendPropertyChanging("CategoryObject");
          if (previousValue != null)
          {
            this._CategoryObject.Entity = null;
            previousValue.CrossValSplits.Remove(this);
          }
          this._CategoryObject.Entity = value;
          if (value != null)
          {
            this._Category = value.Name;
            value.CrossValSplits.Add(this);
          }
          else
          {
            this._Category = default(string);
          }
          this.SendPropertyChanged("CategoryObject");
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Post in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="CrossValSplit_Post", Storage="_Post", ThisKey="IDPost", OtherKey="IDPost", IsUnique=true, IsForeignKey=false)]
    public Post Post
    {
      get
      {
        return this._Post.Entity;
      }
      set
      {
        Post previousValue = this._Post.Entity;
        if ((previousValue != value) || (this._Post.HasLoadedOrAssignedValue == false))
        {
          this.SendPropertyChanging("Post");
          if (previousValue != null)
          {
            this._Post.Entity = null;
            previousValue.CrossValSplit = null;
          }
          this._Post.Entity = value;
          if (value != null)
          {
            value.CrossValSplit = this;
          }
          this.SendPropertyChanged("Post");
        }
      }
    }
   
    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanging(System.String propertyName) 
    {    
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, new PropertyChangingEventArgs(propertyName));
    }

    protected virtual void SendPropertyChanged(System.String propertyName)
    {    
      var handler = this.PropertyChanged;
      if (handler != null)
        handler(this, new PropertyChangedEventArgs(propertyName));
    }
  }

  /// <summary>
  /// There are no comments for MainContext.Category in the schema.
  /// </summary>
  [Table(Name = @"""main"".Categories")]
  public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
  {

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
#pragma warning disable 0649

    private string _Name;

    private System.Nullable<long> _Ord;
#pragma warning restore 0649

    private EntitySet<Annotation> _Annotations;

    private EntitySet<CrossValSplit> _CrossValSplits;

    private EntitySet<AnnotationsConsolidated> _AnnotationsConsolidateds;
    
    #region Extensibility Method Definitions

    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrdChanging(System.Nullable<long> value);
    partial void OnOrdChanged();
    #endregion

    public Category()
    {
      this._Annotations = new EntitySet<Annotation>(new Action<Annotation>(this.attach_Annotations), new Action<Annotation>(this.detach_Annotations));
      this._CrossValSplits = new EntitySet<CrossValSplit>(new Action<CrossValSplit>(this.attach_CrossValSplits), new Action<CrossValSplit>(this.detach_CrossValSplits));
      this._AnnotationsConsolidateds = new EntitySet<AnnotationsConsolidated>(new Action<AnnotationsConsolidated>(this.attach_AnnotationsConsolidateds), new Action<AnnotationsConsolidated>(this.detach_AnnotationsConsolidateds));
      OnCreated();
    }

    
    /// <summary>
    /// There are no comments for Name in the schema.
    /// </summary>
    [Column(Storage = "_Name", CanBeNull = false, DbType = "TEXT NOT NULL", IsPrimaryKey = true)]
    public string Name
    {
      get
      {
        return this._Name;
      }
      set
      {
        if (this._Name != value)
        {
          this.OnNameChanging(value);
          this.SendPropertyChanging("Name");
          this._Name = value;
          this.SendPropertyChanged("Name");
          this.OnNameChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Ord in the schema.
    /// </summary>
    [Column(Storage = "_Ord", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
    public System.Nullable<long> Ord
    {
      get
      {
        return this._Ord;
      }
      set
      {
        if (this._Ord != value)
        {
          this.OnOrdChanging(value);
          this.SendPropertyChanging("Ord");
          this._Ord = value;
          this.SendPropertyChanged("Ord");
          this.OnOrdChanged();
        }
      }
    }

    
    /// <summary>
    /// There are no comments for Annotations in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Category_Annotation", Storage="_Annotations", ThisKey="Name", OtherKey="Category")]
    public EntitySet<Annotation> Annotations
    {
      get
      {
        return this._Annotations;
      }
      set
      {
        this._Annotations.Assign(value);
      }
    }

    
    /// <summary>
    /// There are no comments for CrossValSplits in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Category_CrossValSplit", Storage="_CrossValSplits", ThisKey="Name", OtherKey="Category")]
    public EntitySet<CrossValSplit> CrossValSplits
    {
      get
      {
        return this._CrossValSplits;
      }
      set
      {
        this._CrossValSplits.Assign(value);
      }
    }

    
    /// <summary>
    /// There are no comments for AnnotationsConsolidateds in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="Category_AnnotationsConsolidated", Storage="_AnnotationsConsolidateds", ThisKey="Name", OtherKey="Category")]
    public EntitySet<AnnotationsConsolidated> AnnotationsConsolidateds
    {
      get
      {
        return this._AnnotationsConsolidateds;
      }
      set
      {
        this._AnnotationsConsolidateds.Assign(value);
      }
    }
   
    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanging(System.String propertyName) 
    {    
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, new PropertyChangingEventArgs(propertyName));
    }

    protected virtual void SendPropertyChanged(System.String propertyName)
    {    
      var handler = this.PropertyChanged;
      if (handler != null)
        handler(this, new PropertyChangedEventArgs(propertyName));
    }

    private void attach_Annotations(Annotation entity)
    {
      this.SendPropertyChanging("Annotations");
      entity.CategoryObject = this;
    }
    
    private void detach_Annotations(Annotation entity)
    {
      this.SendPropertyChanging("Annotations");
      entity.CategoryObject = null;
    }

    private void attach_CrossValSplits(CrossValSplit entity)
    {
      this.SendPropertyChanging("CrossValSplits");
      entity.CategoryObject = this;
    }
    
    private void detach_CrossValSplits(CrossValSplit entity)
    {
      this.SendPropertyChanging("CrossValSplits");
      entity.CategoryObject = null;
    }

    private void attach_AnnotationsConsolidateds(AnnotationsConsolidated entity)
    {
      this.SendPropertyChanging("AnnotationsConsolidateds");
      entity.CategoryObject = this;
    }
    
    private void detach_AnnotationsConsolidateds(AnnotationsConsolidated entity)
    {
      this.SendPropertyChanging("AnnotationsConsolidateds");
      entity.CategoryObject = null;
    }
  }

  /// <summary>
  /// There are no comments for MainContext.NewspaperStaff in the schema.
  /// </summary>
  [Table(Name = @"""main"".Newspaper_Staff")]
  public partial class NewspaperStaff : INotifyPropertyChanging, INotifyPropertyChanged
  {

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
#pragma warning disable 0649

    private long _IDUser;
#pragma warning restore 0649

    private EntitySet<Post> _Posts;
    
    #region Extensibility Method Definitions

    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDUserChanging(long value);
    partial void OnIDUserChanged();
    #endregion

    public NewspaperStaff()
    {
      this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
      OnCreated();
    }

    
    /// <summary>
    /// There are no comments for IDUser in the schema.
    /// </summary>
    [Column(Name = @"ID_User", Storage = "_IDUser", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
    public long IDUser
    {
      get
      {
        return this._IDUser;
      }
    }

    
    /// <summary>
    /// There are no comments for Posts in the schema.
    /// </summary>
    [Devart.Data.Linq.Mapping.Association(Name="NewspaperStaff_Post", Storage="_Posts", ThisKey="IDUser", OtherKey="IDUser")]
    public EntitySet<Post> Posts
    {
      get
      {
        return this._Posts;
      }
      set
      {
        this._Posts.Assign(value);
      }
    }
   
    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanging(System.String propertyName) 
    {    
      var handler = this.PropertyChanging;
      if (handler != null)
        handler(this, new PropertyChangingEventArgs(propertyName));
    }

    protected virtual void SendPropertyChanged(System.String propertyName)
    {    
      var handler = this.PropertyChanged;
      if (handler != null)
        handler(this, new PropertyChangedEventArgs(propertyName));
    }

    private void attach_Posts(Post entity)
    {
      this.SendPropertyChanging("Posts");
      entity.NewspaperStaff = this;
    }
    
    private void detach_Posts(Post entity)
    {
      this.SendPropertyChanging("Posts");
      entity.NewspaperStaff = null;
    }
  }
}