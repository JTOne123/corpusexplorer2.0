//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 02.01.2019 19:31:40
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Germanet13Context
{

    [DatabaseAttribute(Name = "germanet13")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class Germanet13DataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(Germanet13DataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertLexUnitConnectionType(LexUnitConnectionType instance);
        partial void UpdateLexUnitConnectionType(LexUnitConnectionType instance);
        partial void DeleteLexUnitConnectionType(LexUnitConnectionType instance);
        partial void InsertSynsetConnectionType(SynsetConnectionType instance);
        partial void UpdateSynsetConnectionType(SynsetConnectionType instance);
        partial void DeleteSynsetConnectionType(SynsetConnectionType instance);
        partial void InsertLexUnitConnection(LexUnitConnection instance);
        partial void UpdateLexUnitConnection(LexUnitConnection instance);
        partial void DeleteLexUnitConnection(LexUnitConnection instance);
        partial void InsertWordNet(WordNet instance);
        partial void UpdateWordNet(WordNet instance);
        partial void DeleteWordNet(WordNet instance);
        partial void InsertWordNetAlternativeTranslation(WordNetAlternativeTranslation instance);
        partial void UpdateWordNetAlternativeTranslation(WordNetAlternativeTranslation instance);
        partial void DeleteWordNetAlternativeTranslation(WordNetAlternativeTranslation instance);
        partial void InsertCompoundProperty(CompoundProperty instance);
        partial void UpdateCompoundProperty(CompoundProperty instance);
        partial void DeleteCompoundProperty(CompoundProperty instance);
        partial void InsertWordNetCrossLingualRelation(WordNetCrossLingualRelation instance);
        partial void UpdateWordNetCrossLingualRelation(WordNetCrossLingualRelation instance);
        partial void DeleteWordNetCrossLingualRelation(WordNetCrossLingualRelation instance);
        partial void InsertCompoundCategory(CompoundCategory instance);
        partial void UpdateCompoundCategory(CompoundCategory instance);
        partial void DeleteCompoundCategory(CompoundCategory instance);
        partial void InsertWikiSense(WikiSense instance);
        partial void UpdateWikiSense(WikiSense instance);
        partial void DeleteWikiSense(WikiSense instance);
        partial void InsertSynsetTable(SynsetTable instance);
        partial void UpdateSynsetTable(SynsetTable instance);
        partial void DeleteSynsetTable(SynsetTable instance);
        partial void InsertLogTable(LogTable instance);
        partial void UpdateLogTable(LogTable instance);
        partial void DeleteLogTable(LogTable instance);
        partial void InsertIdGenerationTable(IdGenerationTable instance);
        partial void UpdateIdGenerationTable(IdGenerationTable instance);
        partial void DeleteIdGenerationTable(IdGenerationTable instance);
        partial void InsertLogCellTable(LogCellTable instance);
        partial void UpdateLogCellTable(LogCellTable instance);
        partial void DeleteLogCellTable(LogCellTable instance);
        partial void InsertWordCategory(WordCategory instance);
        partial void UpdateWordCategory(WordCategory instance);
        partial void DeleteWordCategory(WordCategory instance);
        partial void InsertWordClass(WordClass instance);
        partial void UpdateWordClass(WordClass instance);
        partial void DeleteWordClass(WordClass instance);
        partial void InsertFrame(Frame instance);
        partial void UpdateFrame(Frame instance);
        partial void DeleteFrame(Frame instance);
        partial void InsertCompound(Compound instance);
        partial void UpdateCompound(Compound instance);
        partial void DeleteCompound(Compound instance);
        partial void InsertLexUnit(LexUnit instance);
        partial void UpdateLexUnit(LexUnit instance);
        partial void DeleteLexUnit(LexUnit instance);
        partial void InsertSynsetConnection(SynsetConnection instance);
        partial void UpdateSynsetConnection(SynsetConnection instance);
        partial void DeleteSynsetConnection(SynsetConnection instance);
        partial void InsertExample(Example instance);
        partial void UpdateExample(Example instance);
        partial void DeleteExample(Example instance);
        partial void InsertFrameType(FrameType instance);
        partial void UpdateFrameType(FrameType instance);
        partial void DeleteFrameType(FrameType instance);

        #endregion

        public Germanet13DataContext() :
        base(GetConnectionString("Germanet13DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public Germanet13DataContext(MappingSource mappingSource) :
        base(GetConnectionString("Germanet13DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public Germanet13DataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Germanet13DataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Germanet13DataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Germanet13DataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<LexUnitConnectionType> LexUnitConnectionTypes
        {
            get
            {
                return this.GetTable<LexUnitConnectionType>();
            }
        }

        public Devart.Data.Linq.Table<SynsetConnectionType> SynsetConnectionTypes
        {
            get
            {
                return this.GetTable<SynsetConnectionType>();
            }
        }

        public Devart.Data.Linq.Table<LexUnitConnection> LexUnitConnections
        {
            get
            {
                return this.GetTable<LexUnitConnection>();
            }
        }

        public Devart.Data.Linq.Table<WordNet> WordNets
        {
            get
            {
                return this.GetTable<WordNet>();
            }
        }

        public Devart.Data.Linq.Table<WordNetAlternativeTranslation> WordNetAlternativeTranslations
        {
            get
            {
                return this.GetTable<WordNetAlternativeTranslation>();
            }
        }

        public Devart.Data.Linq.Table<CompoundProperty> CompoundProperties
        {
            get
            {
                return this.GetTable<CompoundProperty>();
            }
        }

        public Devart.Data.Linq.Table<WordNetCrossLingualRelation> WordNetCrossLingualRelations
        {
            get
            {
                return this.GetTable<WordNetCrossLingualRelation>();
            }
        }

        public Devart.Data.Linq.Table<CompoundCategory> CompoundCategories
        {
            get
            {
                return this.GetTable<CompoundCategory>();
            }
        }

        public Devart.Data.Linq.Table<WikiSense> WikiSenses
        {
            get
            {
                return this.GetTable<WikiSense>();
            }
        }

        public Devart.Data.Linq.Table<SynsetTable> SynsetTables
        {
            get
            {
                return this.GetTable<SynsetTable>();
            }
        }

        public Devart.Data.Linq.Table<LogTable> LogTables
        {
            get
            {
                return this.GetTable<LogTable>();
            }
        }

        public Devart.Data.Linq.Table<IdGenerationTable> IdGenerationTables
        {
            get
            {
                return this.GetTable<IdGenerationTable>();
            }
        }

        public Devart.Data.Linq.Table<LogCellTable> LogCellTables
        {
            get
            {
                return this.GetTable<LogCellTable>();
            }
        }

        public Devart.Data.Linq.Table<WordCategory> WordCategories
        {
            get
            {
                return this.GetTable<WordCategory>();
            }
        }

        public Devart.Data.Linq.Table<WordClass> WordClasses
        {
            get
            {
                return this.GetTable<WordClass>();
            }
        }

        public Devart.Data.Linq.Table<Frame> Frames
        {
            get
            {
                return this.GetTable<Frame>();
            }
        }

        public Devart.Data.Linq.Table<Compound> Compounds
        {
            get
            {
                return this.GetTable<Compound>();
            }
        }

        public Devart.Data.Linq.Table<LexUnit> LexUnits
        {
            get
            {
                return this.GetTable<LexUnit>();
            }
        }

        public Devart.Data.Linq.Table<SynsetConnection> SynsetConnections
        {
            get
            {
                return this.GetTable<SynsetConnection>();
            }
        }

        public Devart.Data.Linq.Table<Example> Examples
        {
            get
            {
                return this.GetTable<Example>();
            }
        }

        public Devart.Data.Linq.Table<FrameType> FrameTypes
        {
            get
            {
                return this.GetTable<FrameType>();
            }
        }
    }
}

namespace Germanet13Context
{

    /// <summary>
    /// There are no comments for Germanet13Context.LexUnitConnectionType in the schema.
    /// </summary>
    [Table(Name = @"public.lex_rel_type_table")]
    public partial class LexUnitConnectionType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private string _Direction;

        private string _Inverse;
        #pragma warning restore 0649

        private EntitySet<LexUnitConnection> _LexUnitConnections;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDirectionChanging(string value);
        partial void OnDirectionChanged();
        partial void OnInverseChanging(string value);
        partial void OnInverseChanged();
        #endregion

        public LexUnitConnectionType()
        {
            this._LexUnitConnections = new EntitySet<LexUnitConnection>(new Action<LexUnitConnection>(this.attach_LexUnitConnections), new Action<LexUnitConnection>(this.detach_LexUnitConnections));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Direction in the schema.
        /// </summary>
        [Column(Name = @"direction", Storage = "_Direction", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Direction
        {
            get
            {
                return this._Direction;
            }
            set
            {
                if (this._Direction != value)
                {
                    this.OnDirectionChanging(value);
                    this.SendPropertyChanging("Direction");
                    this._Direction = value;
                    this.SendPropertyChanged("Direction");
                    this.OnDirectionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Inverse in the schema.
        /// </summary>
        [Column(Name = @"inverse", Storage = "_Inverse", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Inverse
        {
            get
            {
                return this._Inverse;
            }
            set
            {
                if (this._Inverse != value)
                {
                    this.OnInverseChanging(value);
                    this.SendPropertyChanging("Inverse");
                    this._Inverse = value;
                    this.SendPropertyChanged("Inverse");
                    this.OnInverseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnitConnections in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnitConnectionType_LexUnitConnection", Storage="_LexUnitConnections", ThisKey="Id", OtherKey="RelTypeId")]
        public EntitySet<LexUnitConnection> LexUnitConnections
        {
            get
            {
                return this._LexUnitConnections;
            }
            set
            {
                this._LexUnitConnections.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_LexUnitConnections(LexUnitConnection entity)
        {
            this.SendPropertyChanging("LexUnitConnections");
            entity.LexUnitConnectionType = this;
        }
    
        private void detach_LexUnitConnections(LexUnitConnection entity)
        {
            this.SendPropertyChanging("LexUnitConnections");
            entity.LexUnitConnectionType = null;
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.SynsetConnectionType in the schema.
    /// </summary>
    [Table(Name = @"public.con_rel_type_table")]
    public partial class SynsetConnectionType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private string _Direction;

        private string _Inverse;

        private bool _Transitive = false;
        #pragma warning restore 0649

        private EntitySet<SynsetConnection> _SynsetConnections;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDirectionChanging(string value);
        partial void OnDirectionChanged();
        partial void OnInverseChanging(string value);
        partial void OnInverseChanged();
        partial void OnTransitiveChanging(bool value);
        partial void OnTransitiveChanged();
        #endregion

        public SynsetConnectionType()
        {
            this._SynsetConnections = new EntitySet<SynsetConnection>(new Action<SynsetConnection>(this.attach_SynsetConnections), new Action<SynsetConnection>(this.detach_SynsetConnections));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Direction in the schema.
        /// </summary>
        [Column(Name = @"direction", Storage = "_Direction", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Direction
        {
            get
            {
                return this._Direction;
            }
            set
            {
                if (this._Direction != value)
                {
                    this.OnDirectionChanging(value);
                    this.SendPropertyChanging("Direction");
                    this._Direction = value;
                    this.SendPropertyChanged("Direction");
                    this.OnDirectionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Inverse in the schema.
        /// </summary>
        [Column(Name = @"inverse", Storage = "_Inverse", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Inverse
        {
            get
            {
                return this._Inverse;
            }
            set
            {
                if (this._Inverse != value)
                {
                    this.OnInverseChanging(value);
                    this.SendPropertyChanging("Inverse");
                    this._Inverse = value;
                    this.SendPropertyChanged("Inverse");
                    this.OnInverseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Transitive in the schema.
        /// </summary>
        [Column(Name = @"transitive", Storage = "_Transitive", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Transitive
        {
            get
            {
                return this._Transitive;
            }
            set
            {
                if (this._Transitive != value)
                {
                    this.OnTransitiveChanging(value);
                    this.SendPropertyChanging("Transitive");
                    this._Transitive = value;
                    this.SendPropertyChanged("Transitive");
                    this.OnTransitiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetConnections in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SynsetConnectionType_SynsetConnection", Storage="_SynsetConnections", ThisKey="Id", OtherKey="RelTypeId")]
        public EntitySet<SynsetConnection> SynsetConnections
        {
            get
            {
                return this._SynsetConnections;
            }
            set
            {
                this._SynsetConnections.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SynsetConnections(SynsetConnection entity)
        {
            this.SendPropertyChanging("SynsetConnections");
            entity.SynsetConnectionType = this;
        }
    
        private void detach_SynsetConnections(SynsetConnection entity)
        {
            this.SendPropertyChanging("SynsetConnections");
            entity.SynsetConnectionType = null;
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.LexUnitConnection in the schema.
    /// </summary>
    [Table(Name = @"public.lex_rel_table")]
    public partial class LexUnitConnection : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _RelTypeId;

        private int _FromLexUnitId;

        private int _ToLexUnitId;
        #pragma warning restore 0649

        private EntityRef<LexUnitConnectionType> _LexUnitConnectionType;

        private EntityRef<LexUnit> _LexUnitFrom;

        private EntityRef<LexUnit> _LexUnitTo;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnRelTypeIdChanging(int value);
        partial void OnRelTypeIdChanged();
        partial void OnFromLexUnitIdChanging(int value);
        partial void OnFromLexUnitIdChanged();
        partial void OnToLexUnitIdChanging(int value);
        partial void OnToLexUnitIdChanged();
        #endregion

        public LexUnitConnection()
        {
            this._LexUnitConnectionType  = default(EntityRef<LexUnitConnectionType>);
            this._LexUnitFrom  = default(EntityRef<LexUnit>);
            this._LexUnitTo  = default(EntityRef<LexUnit>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RelTypeId in the schema.
        /// </summary>
        [Column(Name = @"rel_type_id", Storage = "_RelTypeId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RelTypeId
        {
            get
            {
                return this._RelTypeId;
            }
            set
            {
                if (this._RelTypeId != value)
                {
                    if (this._LexUnitConnectionType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRelTypeIdChanging(value);
                    this.SendPropertyChanging("RelTypeId");
                    this._RelTypeId = value;
                    this.SendPropertyChanged("RelTypeId");
                    this.OnRelTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FromLexUnitId in the schema.
        /// </summary>
        [Column(Name = @"from_lex_unit_id", Storage = "_FromLexUnitId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int FromLexUnitId
        {
            get
            {
                return this._FromLexUnitId;
            }
            set
            {
                if (this._FromLexUnitId != value)
                {
                    if (this._LexUnitFrom.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFromLexUnitIdChanging(value);
                    this.SendPropertyChanging("FromLexUnitId");
                    this._FromLexUnitId = value;
                    this.SendPropertyChanged("FromLexUnitId");
                    this.OnFromLexUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToLexUnitId in the schema.
        /// </summary>
        [Column(Name = @"to_lex_unit_id", Storage = "_ToLexUnitId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ToLexUnitId
        {
            get
            {
                return this._ToLexUnitId;
            }
            set
            {
                if (this._ToLexUnitId != value)
                {
                    if (this._LexUnitTo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnToLexUnitIdChanging(value);
                    this.SendPropertyChanging("ToLexUnitId");
                    this._ToLexUnitId = value;
                    this.SendPropertyChanged("ToLexUnitId");
                    this.OnToLexUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnitConnectionType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnitConnectionType_LexUnitConnection", Storage="_LexUnitConnectionType", ThisKey="RelTypeId", OtherKey="Id", IsForeignKey=true)]
        public LexUnitConnectionType LexUnitConnectionType
        {
            get
            {
                return this._LexUnitConnectionType.Entity;
            }
            set
            {
                LexUnitConnectionType previousValue = this._LexUnitConnectionType.Entity;
                if ((previousValue != value) || (this._LexUnitConnectionType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LexUnitConnectionType");
                    if (previousValue != null)
                    {
                        this._LexUnitConnectionType.Entity = null;
                        previousValue.LexUnitConnections.Remove(this);
                    }
                    this._LexUnitConnectionType.Entity = value;
                    if (value != null)
                    {
                        this._RelTypeId = value.Id;
                        value.LexUnitConnections.Add(this);
                    }
                    else
                    {
                        this._RelTypeId = default(int);
                    }
                    this.SendPropertyChanged("LexUnitConnectionType");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnitFrom in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_LexRel", Storage="_LexUnitFrom", ThisKey="FromLexUnitId", OtherKey="Id", IsForeignKey=true)]
        public LexUnit LexUnitFrom
        {
            get
            {
                return this._LexUnitFrom.Entity;
            }
            set
            {
                LexUnit previousValue = this._LexUnitFrom.Entity;
                if ((previousValue != value) || (this._LexUnitFrom.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LexUnitFrom");
                    if (previousValue != null)
                    {
                        this._LexUnitFrom.Entity = null;
                        previousValue.IncomingConnections.Remove(this);
                    }
                    this._LexUnitFrom.Entity = value;
                    if (value != null)
                    {
                        this._FromLexUnitId = value.Id;
                        value.IncomingConnections.Add(this);
                    }
                    else
                    {
                        this._FromLexUnitId = default(int);
                    }
                    this.SendPropertyChanged("LexUnitFrom");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnitTo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_LexRel1", Storage="_LexUnitTo", ThisKey="ToLexUnitId", OtherKey="Id", IsForeignKey=true)]
        public LexUnit LexUnitTo
        {
            get
            {
                return this._LexUnitTo.Entity;
            }
            set
            {
                LexUnit previousValue = this._LexUnitTo.Entity;
                if ((previousValue != value) || (this._LexUnitTo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LexUnitTo");
                    if (previousValue != null)
                    {
                        this._LexUnitTo.Entity = null;
                        previousValue.OutgoingConnections.Remove(this);
                    }
                    this._LexUnitTo.Entity = value;
                    if (value != null)
                    {
                        this._ToLexUnitId = value.Id;
                        value.OutgoingConnections.Add(this);
                    }
                    else
                    {
                        this._ToLexUnitId = default(int);
                    }
                    this.SendPropertyChanged("LexUnitTo");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.WordNet in the schema.
    /// </summary>
    [Table(Name = @"public.ili_table")]
    public partial class WordNet : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _GnLexUnitId;

        private int? _GnOldSense;

        private int _EwnRelation;

        private string _PwnWord;

        private string _Pwn20Id;

        private string _Pwn30Id;

        private string _Source;

        private string _Pwn20Paraphrase;
        #pragma warning restore 0649

        private EntitySet<LexUnit> _LexUnit;

        private EntityRef<WordNetCrossLingualRelation> _WordNetCrossLingualRelation;

        private EntitySet<WordNetAlternativeTranslation> _WordNetAlternativeTranslations;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnGnLexUnitIdChanging(int value);
        partial void OnGnLexUnitIdChanged();
        partial void OnGnOldSenseChanging(int? value);
        partial void OnGnOldSenseChanged();
        partial void OnEwnRelationChanging(int value);
        partial void OnEwnRelationChanged();
        partial void OnPwnWordChanging(string value);
        partial void OnPwnWordChanged();
        partial void OnPwn20IdChanging(string value);
        partial void OnPwn20IdChanged();
        partial void OnPwn30IdChanging(string value);
        partial void OnPwn30IdChanged();
        partial void OnSourceChanging(string value);
        partial void OnSourceChanged();
        partial void OnPwn20ParaphraseChanging(string value);
        partial void OnPwn20ParaphraseChanged();
        #endregion

        public WordNet()
        {
            this._LexUnit = new EntitySet<LexUnit>(new Action<LexUnit>(this.attach_LexUnit), new Action<LexUnit>(this.detach_LexUnit));
            this._WordNetCrossLingualRelation  = default(EntityRef<WordNetCrossLingualRelation>);
            this._WordNetAlternativeTranslations = new EntitySet<WordNetAlternativeTranslation>(new Action<WordNetAlternativeTranslation>(this.attach_WordNetAlternativeTranslations), new Action<WordNetAlternativeTranslation>(this.detach_WordNetAlternativeTranslations));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GnLexUnitId in the schema.
        /// </summary>
        [Column(Name = @"gn_lex_unit_id", Storage = "_GnLexUnitId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int GnLexUnitId
        {
            get
            {
                return this._GnLexUnitId;
            }
            set
            {
                if (this._GnLexUnitId != value)
                {
                    this.OnGnLexUnitIdChanging(value);
                    this.SendPropertyChanging("GnLexUnitId");
                    this._GnLexUnitId = value;
                    this.SendPropertyChanged("GnLexUnitId");
                    this.OnGnLexUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GnOldSense in the schema.
        /// </summary>
        [Column(Name = @"gn_old_sense", Storage = "_GnOldSense", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? GnOldSense
        {
            get
            {
                return this._GnOldSense;
            }
            set
            {
                if (this._GnOldSense != value)
                {
                    this.OnGnOldSenseChanging(value);
                    this.SendPropertyChanging("GnOldSense");
                    this._GnOldSense = value;
                    this.SendPropertyChanged("GnOldSense");
                    this.OnGnOldSenseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EwnRelation in the schema.
        /// </summary>
        [Column(Name = @"ewn_relation", Storage = "_EwnRelation", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int EwnRelation
        {
            get
            {
                return this._EwnRelation;
            }
            set
            {
                if (this._EwnRelation != value)
                {
                    if (this._WordNetCrossLingualRelation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEwnRelationChanging(value);
                    this.SendPropertyChanging("EwnRelation");
                    this._EwnRelation = value;
                    this.SendPropertyChanged("EwnRelation");
                    this.OnEwnRelationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PwnWord in the schema.
        /// </summary>
        [Column(Name = @"pwn_word", Storage = "_PwnWord", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string PwnWord
        {
            get
            {
                return this._PwnWord;
            }
            set
            {
                if (this._PwnWord != value)
                {
                    this.OnPwnWordChanging(value);
                    this.SendPropertyChanging("PwnWord");
                    this._PwnWord = value;
                    this.SendPropertyChanged("PwnWord");
                    this.OnPwnWordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pwn20Id in the schema.
        /// </summary>
        [Column(Name = @"pwn20_id", Storage = "_Pwn20Id", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Pwn20Id
        {
            get
            {
                return this._Pwn20Id;
            }
            set
            {
                if (this._Pwn20Id != value)
                {
                    this.OnPwn20IdChanging(value);
                    this.SendPropertyChanging("Pwn20Id");
                    this._Pwn20Id = value;
                    this.SendPropertyChanged("Pwn20Id");
                    this.OnPwn20IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pwn30Id in the schema.
        /// </summary>
        [Column(Name = @"pwn30_id", Storage = "_Pwn30Id", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Pwn30Id
        {
            get
            {
                return this._Pwn30Id;
            }
            set
            {
                if (this._Pwn30Id != value)
                {
                    this.OnPwn30IdChanging(value);
                    this.SendPropertyChanging("Pwn30Id");
                    this._Pwn30Id = value;
                    this.SendPropertyChanged("Pwn30Id");
                    this.OnPwn30IdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Source in the schema.
        /// </summary>
        [Column(Name = @"""source""", Storage = "_Source", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Source
        {
            get
            {
                return this._Source;
            }
            set
            {
                if (this._Source != value)
                {
                    this.OnSourceChanging(value);
                    this.SendPropertyChanging("Source");
                    this._Source = value;
                    this.SendPropertyChanged("Source");
                    this.OnSourceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pwn20Paraphrase in the schema.
        /// </summary>
        [Column(Name = @"pwn20_paraphrase", Storage = "_Pwn20Paraphrase", DbType = "VARCHAR(1000)", UpdateCheck = UpdateCheck.Never)]
        public string Pwn20Paraphrase
        {
            get
            {
                return this._Pwn20Paraphrase;
            }
            set
            {
                if (this._Pwn20Paraphrase != value)
                {
                    this.OnPwn20ParaphraseChanging(value);
                    this.SendPropertyChanging("Pwn20Paraphrase");
                    this._Pwn20Paraphrase = value;
                    this.SendPropertyChanged("Pwn20Paraphrase");
                    this.OnPwn20ParaphraseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnit in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WordNet_LexUnit", Storage="_LexUnit", ThisKey="GnLexUnitId", OtherKey="Id")]
        public EntitySet<LexUnit> LexUnit
        {
            get
            {
                return this._LexUnit;
            }
            set
            {
                this._LexUnit.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for WordNetCrossLingualRelation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WordNetCrossLingualRelation_WordNet", Storage="_WordNetCrossLingualRelation", ThisKey="EwnRelation", OtherKey="Id", IsForeignKey=true)]
        public WordNetCrossLingualRelation WordNetCrossLingualRelation
        {
            get
            {
                return this._WordNetCrossLingualRelation.Entity;
            }
            set
            {
                WordNetCrossLingualRelation previousValue = this._WordNetCrossLingualRelation.Entity;
                if ((previousValue != value) || (this._WordNetCrossLingualRelation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("WordNetCrossLingualRelation");
                    if (previousValue != null)
                    {
                        this._WordNetCrossLingualRelation.Entity = null;
                        previousValue.WordNet.Remove(this);
                    }
                    this._WordNetCrossLingualRelation.Entity = value;
                    if (value != null)
                    {
                        this._EwnRelation = value.Id;
                        value.WordNet.Add(this);
                    }
                    else
                    {
                        this._EwnRelation = default(int);
                    }
                    this.SendPropertyChanged("WordNetCrossLingualRelation");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WordNetAlternativeTranslations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WordNet_WordNetAlternativeTranslation", Storage="_WordNetAlternativeTranslations", ThisKey="Id", OtherKey="IliId")]
        public EntitySet<WordNetAlternativeTranslation> WordNetAlternativeTranslations
        {
            get
            {
                return this._WordNetAlternativeTranslations;
            }
            set
            {
                this._WordNetAlternativeTranslations.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_LexUnit(LexUnit entity)
        {
            this.SendPropertyChanging("LexUnit");
            entity.WordNets = this;
        }
    
        private void detach_LexUnit(LexUnit entity)
        {
            this.SendPropertyChanging("LexUnit");
            entity.WordNets = null;
        }

        private void attach_WordNetAlternativeTranslations(WordNetAlternativeTranslation entity)
        {
            this.SendPropertyChanging("WordNetAlternativeTranslations");
            entity.WordNet = this;
        }
    
        private void detach_WordNetAlternativeTranslations(WordNetAlternativeTranslation entity)
        {
            this.SendPropertyChanging("WordNetAlternativeTranslations");
            entity.WordNet = null;
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.WordNetAlternativeTranslation in the schema.
    /// </summary>
    [Table(Name = @"public.ili_pwn20_synonym_table")]
    public partial class WordNetAlternativeTranslation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _IliId;

        private string _Pwn20Synonym;
        #pragma warning restore 0649

        private EntityRef<WordNet> _WordNet;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIliIdChanging(int value);
        partial void OnIliIdChanged();
        partial void OnPwn20SynonymChanging(string value);
        partial void OnPwn20SynonymChanged();
        #endregion

        public WordNetAlternativeTranslation()
        {
            this._WordNet  = default(EntityRef<WordNet>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IliId in the schema.
        /// </summary>
        [Column(Name = @"ili_id", Storage = "_IliId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IliId
        {
            get
            {
                return this._IliId;
            }
            set
            {
                if (this._IliId != value)
                {
                    if (this._WordNet.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIliIdChanging(value);
                    this.SendPropertyChanging("IliId");
                    this._IliId = value;
                    this.SendPropertyChanged("IliId");
                    this.OnIliIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pwn20Synonym in the schema.
        /// </summary>
        [Column(Name = @"pwn20_synonym", Storage = "_Pwn20Synonym", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Pwn20Synonym
        {
            get
            {
                return this._Pwn20Synonym;
            }
            set
            {
                if (this._Pwn20Synonym != value)
                {
                    this.OnPwn20SynonymChanging(value);
                    this.SendPropertyChanging("Pwn20Synonym");
                    this._Pwn20Synonym = value;
                    this.SendPropertyChanged("Pwn20Synonym");
                    this.OnPwn20SynonymChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WordNet in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WordNet_WordNetAlternativeTranslation", Storage="_WordNet", ThisKey="IliId", OtherKey="Id", IsForeignKey=true)]
        public WordNet WordNet
        {
            get
            {
                return this._WordNet.Entity;
            }
            set
            {
                WordNet previousValue = this._WordNet.Entity;
                if ((previousValue != value) || (this._WordNet.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("WordNet");
                    if (previousValue != null)
                    {
                        this._WordNet.Entity = null;
                        previousValue.WordNetAlternativeTranslations.Remove(this);
                    }
                    this._WordNet.Entity = value;
                    if (value != null)
                    {
                        this._IliId = value.Id;
                        value.WordNetAlternativeTranslations.Add(this);
                    }
                    else
                    {
                        this._IliId = default(int);
                    }
                    this.SendPropertyChanged("WordNet");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.CompoundProperty in the schema.
    /// </summary>
    [Table(Name = @"public.compound_property_table")]
    public partial class CompoundProperty : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Property;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnPropertyChanging(string value);
        partial void OnPropertyChanged();
        #endregion

        public CompoundProperty()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Property in the schema.
        /// </summary>
        [Column(Name = @"property", Storage = "_Property", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Property
        {
            get
            {
                return this._Property;
            }
            set
            {
                if (this._Property != value)
                {
                    this.OnPropertyChanging(value);
                    this.SendPropertyChanging("Property");
                    this._Property = value;
                    this.SendPropertyChanged("Property");
                    this.OnPropertyChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.WordNetCrossLingualRelation in the schema.
    /// </summary>
    [Table(Name = @"public.ewn_rel_table")]
    public partial class WordNetCrossLingualRelation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<WordNet> _WordNet;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public WordNetCrossLingualRelation()
        {
            this._WordNet = new EntitySet<WordNet>(new Action<WordNet>(this.attach_WordNet), new Action<WordNet>(this.detach_WordNet));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WordNet in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WordNetCrossLingualRelation_WordNet", Storage="_WordNet", ThisKey="Id", OtherKey="EwnRelation")]
        public EntitySet<WordNet> WordNet
        {
            get
            {
                return this._WordNet;
            }
            set
            {
                this._WordNet.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_WordNet(WordNet entity)
        {
            this.SendPropertyChanging("WordNet");
            entity.WordNetCrossLingualRelation = this;
        }
    
        private void detach_WordNet(WordNet entity)
        {
            this.SendPropertyChanging("WordNet");
            entity.WordNetCrossLingualRelation = null;
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.CompoundCategory in the schema.
    /// </summary>
    [Table(Name = @"public.compound_category_table")]
    public partial class CompoundCategory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Category;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        #endregion

        public CompoundCategory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Column(Name = @"category", Storage = "_Category", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging("Category");
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.WikiSense in the schema.
    /// </summary>
    [Table(Name = @"public.wkn_sense_table")]
    public partial class WikiSense : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _GnLexUnitId;

        private int _WknWordEntryId;

        private int _WknSenseId;

        private string _WknGloss;

        private bool _WknGlossEdited = false;
        #pragma warning restore 0649

        private EntitySet<LexUnit> _LexUnits;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnGnLexUnitIdChanging(int value);
        partial void OnGnLexUnitIdChanged();
        partial void OnWknWordEntryIdChanging(int value);
        partial void OnWknWordEntryIdChanged();
        partial void OnWknSenseIdChanging(int value);
        partial void OnWknSenseIdChanged();
        partial void OnWknGlossChanging(string value);
        partial void OnWknGlossChanged();
        partial void OnWknGlossEditedChanging(bool value);
        partial void OnWknGlossEditedChanged();
        #endregion

        public WikiSense()
        {
            this._LexUnits = new EntitySet<LexUnit>(new Action<LexUnit>(this.attach_LexUnits), new Action<LexUnit>(this.detach_LexUnits));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GnLexUnitId in the schema.
        /// </summary>
        [Column(Name = @"gn_lex_unit_id", Storage = "_GnLexUnitId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int GnLexUnitId
        {
            get
            {
                return this._GnLexUnitId;
            }
            set
            {
                if (this._GnLexUnitId != value)
                {
                    this.OnGnLexUnitIdChanging(value);
                    this.SendPropertyChanging("GnLexUnitId");
                    this._GnLexUnitId = value;
                    this.SendPropertyChanged("GnLexUnitId");
                    this.OnGnLexUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WknWordEntryId in the schema.
        /// </summary>
        [Column(Name = @"wkn_word_entry_id", Storage = "_WknWordEntryId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int WknWordEntryId
        {
            get
            {
                return this._WknWordEntryId;
            }
            set
            {
                if (this._WknWordEntryId != value)
                {
                    this.OnWknWordEntryIdChanging(value);
                    this.SendPropertyChanging("WknWordEntryId");
                    this._WknWordEntryId = value;
                    this.SendPropertyChanged("WknWordEntryId");
                    this.OnWknWordEntryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WknSenseId in the schema.
        /// </summary>
        [Column(Name = @"wkn_sense_id", Storage = "_WknSenseId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int WknSenseId
        {
            get
            {
                return this._WknSenseId;
            }
            set
            {
                if (this._WknSenseId != value)
                {
                    this.OnWknSenseIdChanging(value);
                    this.SendPropertyChanging("WknSenseId");
                    this._WknSenseId = value;
                    this.SendPropertyChanged("WknSenseId");
                    this.OnWknSenseIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WknGloss in the schema.
        /// </summary>
        [Column(Name = @"wkn_gloss", Storage = "_WknGloss", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string WknGloss
        {
            get
            {
                return this._WknGloss;
            }
            set
            {
                if (this._WknGloss != value)
                {
                    this.OnWknGlossChanging(value);
                    this.SendPropertyChanging("WknGloss");
                    this._WknGloss = value;
                    this.SendPropertyChanged("WknGloss");
                    this.OnWknGlossChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WknGlossEdited in the schema.
        /// </summary>
        [Column(Name = @"wkn_gloss_edited", Storage = "_WknGlossEdited", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool WknGlossEdited
        {
            get
            {
                return this._WknGlossEdited;
            }
            set
            {
                if (this._WknGlossEdited != value)
                {
                    this.OnWknGlossEditedChanging(value);
                    this.SendPropertyChanging("WknGlossEdited");
                    this._WknGlossEdited = value;
                    this.SendPropertyChanged("WknGlossEdited");
                    this.OnWknGlossEditedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnits in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WikiSense_LexUnit", Storage="_LexUnits", ThisKey="GnLexUnitId", OtherKey="Id")]
        public EntitySet<LexUnit> LexUnits
        {
            get
            {
                return this._LexUnits;
            }
            set
            {
                this._LexUnits.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_LexUnits(LexUnit entity)
        {
            this.SendPropertyChanging("LexUnits");
            entity.WikiSense = this;
        }
    
        private void detach_LexUnits(LexUnit entity)
        {
            this.SendPropertyChanging("LexUnits");
            entity.WikiSense = null;
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.SynsetTable in the schema.
    /// </summary>
    [Table(Name = @"public.synset_table")]
    public partial class SynsetTable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int? _WordClassId;

        private int? _WordCategoryId;

        private string _Paraphrase;

        private string _Comment;
        #pragma warning restore 0649

        private EntitySet<LexUnit> _LexUnits;

        private EntityRef<WordCategory> _WordCategory;

        private EntityRef<WordClass> _WordClass;

        private EntitySet<SynsetConnection> _IncomingConnections;

        private EntitySet<SynsetConnection> _OutgoingConnections;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnWordClassIdChanging(int? value);
        partial void OnWordClassIdChanged();
        partial void OnWordCategoryIdChanging(int? value);
        partial void OnWordCategoryIdChanged();
        partial void OnParaphraseChanging(string value);
        partial void OnParaphraseChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        #endregion

        public SynsetTable()
        {
            this._LexUnits = new EntitySet<LexUnit>(new Action<LexUnit>(this.attach_LexUnits), new Action<LexUnit>(this.detach_LexUnits));
            this._WordCategory  = default(EntityRef<WordCategory>);
            this._WordClass  = default(EntityRef<WordClass>);
            this._IncomingConnections = new EntitySet<SynsetConnection>(new Action<SynsetConnection>(this.attach_IncomingConnections), new Action<SynsetConnection>(this.detach_IncomingConnections));
            this._OutgoingConnections = new EntitySet<SynsetConnection>(new Action<SynsetConnection>(this.attach_OutgoingConnections), new Action<SynsetConnection>(this.detach_OutgoingConnections));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WordClassId in the schema.
        /// </summary>
        [Column(Name = @"word_class_id", Storage = "_WordClassId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? WordClassId
        {
            get
            {
                return this._WordClassId;
            }
            set
            {
                if (this._WordClassId != value)
                {
                    if (this._WordClass.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWordClassIdChanging(value);
                    this.SendPropertyChanging("WordClassId");
                    this._WordClassId = value;
                    this.SendPropertyChanged("WordClassId");
                    this.OnWordClassIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WordCategoryId in the schema.
        /// </summary>
        [Column(Name = @"word_category_id", Storage = "_WordCategoryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? WordCategoryId
        {
            get
            {
                return this._WordCategoryId;
            }
            set
            {
                if (this._WordCategoryId != value)
                {
                    if (this._WordCategory.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWordCategoryIdChanging(value);
                    this.SendPropertyChanging("WordCategoryId");
                    this._WordCategoryId = value;
                    this.SendPropertyChanged("WordCategoryId");
                    this.OnWordCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paraphrase in the schema.
        /// </summary>
        [Column(Name = @"paraphrase", Storage = "_Paraphrase", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Paraphrase
        {
            get
            {
                return this._Paraphrase;
            }
            set
            {
                if (this._Paraphrase != value)
                {
                    this.OnParaphraseChanging(value);
                    this.SendPropertyChanging("Paraphrase");
                    this._Paraphrase = value;
                    this.SendPropertyChanged("Paraphrase");
                    this.OnParaphraseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"""comment""", Storage = "_Comment", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging("Comment");
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnits in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SynsetTable_LexUnit", Storage="_LexUnits", ThisKey="Id", OtherKey="SynsetId")]
        public EntitySet<LexUnit> LexUnits
        {
            get
            {
                return this._LexUnits;
            }
            set
            {
                this._LexUnits.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for WordCategory in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WordCategory_SynsetTable", Storage="_WordCategory", ThisKey="WordCategoryId", OtherKey="Id", IsForeignKey=true)]
        public WordCategory WordCategory
        {
            get
            {
                return this._WordCategory.Entity;
            }
            set
            {
                WordCategory previousValue = this._WordCategory.Entity;
                if ((previousValue != value) || (this._WordCategory.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("WordCategory");
                    if (previousValue != null)
                    {
                        this._WordCategory.Entity = null;
                        previousValue.SynsetTables.Remove(this);
                    }
                    this._WordCategory.Entity = value;
                    if (value != null)
                    {
                        this._WordCategoryId = value.Id;
                        value.SynsetTables.Add(this);
                    }
                    else
                    {
                        this._WordCategoryId = default(int?);
                    }
                    this.SendPropertyChanged("WordCategory");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WordClass in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WordClass_SynsetTable", Storage="_WordClass", ThisKey="WordClassId", OtherKey="Id", IsForeignKey=true)]
        public WordClass WordClass
        {
            get
            {
                return this._WordClass.Entity;
            }
            set
            {
                WordClass previousValue = this._WordClass.Entity;
                if ((previousValue != value) || (this._WordClass.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("WordClass");
                    if (previousValue != null)
                    {
                        this._WordClass.Entity = null;
                        previousValue.SynsetTables.Remove(this);
                    }
                    this._WordClass.Entity = value;
                    if (value != null)
                    {
                        this._WordClassId = value.Id;
                        value.SynsetTables.Add(this);
                    }
                    else
                    {
                        this._WordClassId = default(int?);
                    }
                    this.SendPropertyChanged("WordClass");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IncomingConnections in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SynsetTable_SynsetConnection", Storage="_IncomingConnections", ThisKey="Id", OtherKey="FromSynsetId")]
        public EntitySet<SynsetConnection> IncomingConnections
        {
            get
            {
                return this._IncomingConnections;
            }
            set
            {
                this._IncomingConnections.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for OutgoingConnections in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SynsetTable_SynsetConnection1", Storage="_OutgoingConnections", ThisKey="Id", OtherKey="ToSynsetId")]
        public EntitySet<SynsetConnection> OutgoingConnections
        {
            get
            {
                return this._OutgoingConnections;
            }
            set
            {
                this._OutgoingConnections.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_LexUnits(LexUnit entity)
        {
            this.SendPropertyChanging("LexUnits");
            entity.Synset = this;
        }
    
        private void detach_LexUnits(LexUnit entity)
        {
            this.SendPropertyChanging("LexUnits");
            entity.Synset = null;
        }

        private void attach_IncomingConnections(SynsetConnection entity)
        {
            this.SendPropertyChanging("IncomingConnections");
            entity.SynsetFrom = this;
        }
    
        private void detach_IncomingConnections(SynsetConnection entity)
        {
            this.SendPropertyChanging("IncomingConnections");
            entity.SynsetFrom = null;
        }

        private void attach_OutgoingConnections(SynsetConnection entity)
        {
            this.SendPropertyChanging("OutgoingConnections");
            entity.SynsetTo = this;
        }
    
        private void detach_OutgoingConnections(SynsetConnection entity)
        {
            this.SendPropertyChanging("OutgoingConnections");
            entity.SynsetTo = null;
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.LogTable in the schema.
    /// </summary>
    [Table(Name = @"public.log_table")]
    public partial class LogTable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Modifier;

        private System.DateTime _ModTime;

        private int _ModifiedCell;

        private int _ModifiedObjectId;

        private string _OldValue;

        private string _NewValue;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnModifierChanging(string value);
        partial void OnModifierChanged();
        partial void OnModTimeChanging(System.DateTime value);
        partial void OnModTimeChanged();
        partial void OnModifiedCellChanging(int value);
        partial void OnModifiedCellChanged();
        partial void OnModifiedObjectIdChanging(int value);
        partial void OnModifiedObjectIdChanged();
        partial void OnOldValueChanging(string value);
        partial void OnOldValueChanged();
        partial void OnNewValueChanging(string value);
        partial void OnNewValueChanged();
        #endregion

        public LogTable()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modifier in the schema.
        /// </summary>
        [Column(Name = @"modifier", Storage = "_Modifier", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Modifier
        {
            get
            {
                return this._Modifier;
            }
            set
            {
                if (this._Modifier != value)
                {
                    this.OnModifierChanging(value);
                    this.SendPropertyChanging("Modifier");
                    this._Modifier = value;
                    this.SendPropertyChanged("Modifier");
                    this.OnModifierChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModTime in the schema.
        /// </summary>
        [Column(Name = @"mod_time", Storage = "_ModTime", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ModTime
        {
            get
            {
                return this._ModTime;
            }
            set
            {
                if (this._ModTime != value)
                {
                    this.OnModTimeChanging(value);
                    this.SendPropertyChanging("ModTime");
                    this._ModTime = value;
                    this.SendPropertyChanged("ModTime");
                    this.OnModTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModifiedCell in the schema.
        /// </summary>
        [Column(Name = @"modified_cell", Storage = "_ModifiedCell", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ModifiedCell
        {
            get
            {
                return this._ModifiedCell;
            }
            set
            {
                if (this._ModifiedCell != value)
                {
                    this.OnModifiedCellChanging(value);
                    this.SendPropertyChanging("ModifiedCell");
                    this._ModifiedCell = value;
                    this.SendPropertyChanged("ModifiedCell");
                    this.OnModifiedCellChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModifiedObjectId in the schema.
        /// </summary>
        [Column(Name = @"modified_object_id", Storage = "_ModifiedObjectId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ModifiedObjectId
        {
            get
            {
                return this._ModifiedObjectId;
            }
            set
            {
                if (this._ModifiedObjectId != value)
                {
                    this.OnModifiedObjectIdChanging(value);
                    this.SendPropertyChanging("ModifiedObjectId");
                    this._ModifiedObjectId = value;
                    this.SendPropertyChanged("ModifiedObjectId");
                    this.OnModifiedObjectIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OldValue in the schema.
        /// </summary>
        [Column(Name = @"old_value", Storage = "_OldValue", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string OldValue
        {
            get
            {
                return this._OldValue;
            }
            set
            {
                if (this._OldValue != value)
                {
                    this.OnOldValueChanging(value);
                    this.SendPropertyChanging("OldValue");
                    this._OldValue = value;
                    this.SendPropertyChanged("OldValue");
                    this.OnOldValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NewValue in the schema.
        /// </summary>
        [Column(Name = @"new_value", Storage = "_NewValue", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string NewValue
        {
            get
            {
                return this._NewValue;
            }
            set
            {
                if (this._NewValue != value)
                {
                    this.OnNewValueChanging(value);
                    this.SendPropertyChanging("NewValue");
                    this._NewValue = value;
                    this.SendPropertyChanged("NewValue");
                    this.OnNewValueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.IdGenerationTable in the schema.
    /// </summary>
    [Table(Name = @"public.id_generation_table")]
    public partial class IdGenerationTable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _GeneratedKey;

        private int _GeneratedValue;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnGeneratedKeyChanging(string value);
        partial void OnGeneratedKeyChanged();
        partial void OnGeneratedValueChanging(int value);
        partial void OnGeneratedValueChanged();
        #endregion

        public IdGenerationTable()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for GeneratedKey in the schema.
        /// </summary>
        [Column(Name = @"generated_key", Storage = "_GeneratedKey", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string GeneratedKey
        {
            get
            {
                return this._GeneratedKey;
            }
            set
            {
                if (this._GeneratedKey != value)
                {
                    this.OnGeneratedKeyChanging(value);
                    this.SendPropertyChanging("GeneratedKey");
                    this._GeneratedKey = value;
                    this.SendPropertyChanged("GeneratedKey");
                    this.OnGeneratedKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GeneratedValue in the schema.
        /// </summary>
        [Column(Name = @"generated_value", Storage = "_GeneratedValue", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int GeneratedValue
        {
            get
            {
                return this._GeneratedValue;
            }
            set
            {
                if (this._GeneratedValue != value)
                {
                    this.OnGeneratedValueChanging(value);
                    this.SendPropertyChanging("GeneratedValue");
                    this._GeneratedValue = value;
                    this.SendPropertyChanged("GeneratedValue");
                    this.OnGeneratedValueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.LogCellTable in the schema.
    /// </summary>
    [Table(Name = @"public.log_cell_table")]
    public partial class LogCellTable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _TableName;

        private string _CellName;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();
        partial void OnCellNameChanging(string value);
        partial void OnCellNameChanged();
        #endregion

        public LogCellTable()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TableName in the schema.
        /// </summary>
        [Column(Name = @"""table_name""", Storage = "_TableName", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if (this._TableName != value)
                {
                    this.OnTableNameChanging(value);
                    this.SendPropertyChanging("TableName");
                    this._TableName = value;
                    this.SendPropertyChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CellName in the schema.
        /// </summary>
        [Column(Name = @"cell_name", Storage = "_CellName", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CellName
        {
            get
            {
                return this._CellName;
            }
            set
            {
                if (this._CellName != value)
                {
                    this.OnCellNameChanging(value);
                    this.SendPropertyChanging("CellName");
                    this._CellName = value;
                    this.SendPropertyChanged("CellName");
                    this.OnCellNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.WordCategory in the schema.
    /// </summary>
    [Table(Name = @"public.word_category_table")]
    public partial class WordCategory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<SynsetTable> _SynsetTables;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public WordCategory()
        {
            this._SynsetTables = new EntitySet<SynsetTable>(new Action<SynsetTable>(this.attach_SynsetTables), new Action<SynsetTable>(this.detach_SynsetTables));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"word_category", Storage = "_Name", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetTables in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WordCategory_SynsetTable", Storage="_SynsetTables", ThisKey="Id", OtherKey="WordCategoryId")]
        public EntitySet<SynsetTable> SynsetTables
        {
            get
            {
                return this._SynsetTables;
            }
            set
            {
                this._SynsetTables.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SynsetTables(SynsetTable entity)
        {
            this.SendPropertyChanging("SynsetTables");
            entity.WordCategory = this;
        }
    
        private void detach_SynsetTables(SynsetTable entity)
        {
            this.SendPropertyChanging("SynsetTables");
            entity.WordCategory = null;
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.WordClass in the schema.
    /// </summary>
    [Table(Name = @"public.word_class_table")]
    public partial class WordClass : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<SynsetTable> _SynsetTables;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public WordClass()
        {
            this._SynsetTables = new EntitySet<SynsetTable>(new Action<SynsetTable>(this.attach_SynsetTables), new Action<SynsetTable>(this.detach_SynsetTables));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"word_class", Storage = "_Name", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetTables in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WordClass_SynsetTable", Storage="_SynsetTables", ThisKey="Id", OtherKey="WordClassId")]
        public EntitySet<SynsetTable> SynsetTables
        {
            get
            {
                return this._SynsetTables;
            }
            set
            {
                this._SynsetTables.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SynsetTables(SynsetTable entity)
        {
            this.SendPropertyChanging("SynsetTables");
            entity.WordClass = this;
        }
    
        private void detach_SynsetTables(SynsetTable entity)
        {
            this.SendPropertyChanging("SynsetTables");
            entity.WordClass = null;
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.Frame in the schema.
    /// </summary>
    [Table(Name = @"public.frame_table")]
    public partial class Frame : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _LexUnitId;

        private int _FrameTypeId;
        #pragma warning restore 0649

        private EntityRef<FrameType> _FrameType;

        private EntityRef<LexUnit> _LexUnit;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnLexUnitIdChanging(int value);
        partial void OnLexUnitIdChanged();
        partial void OnFrameTypeIdChanging(int value);
        partial void OnFrameTypeIdChanged();
        #endregion

        public Frame()
        {
            this._FrameType  = default(EntityRef<FrameType>);
            this._LexUnit  = default(EntityRef<LexUnit>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnitId in the schema.
        /// </summary>
        [Column(Name = @"lex_unit_id", Storage = "_LexUnitId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LexUnitId
        {
            get
            {
                return this._LexUnitId;
            }
            set
            {
                if (this._LexUnitId != value)
                {
                    if (this._LexUnit.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLexUnitIdChanging(value);
                    this.SendPropertyChanging("LexUnitId");
                    this._LexUnitId = value;
                    this.SendPropertyChanged("LexUnitId");
                    this.OnLexUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FrameTypeId in the schema.
        /// </summary>
        [Column(Name = @"frame_type_id", Storage = "_FrameTypeId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int FrameTypeId
        {
            get
            {
                return this._FrameTypeId;
            }
            set
            {
                if (this._FrameTypeId != value)
                {
                    if (this._FrameType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFrameTypeIdChanging(value);
                    this.SendPropertyChanging("FrameTypeId");
                    this._FrameTypeId = value;
                    this.SendPropertyChanged("FrameTypeId");
                    this.OnFrameTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FrameType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="FrameType_Frame", Storage="_FrameType", ThisKey="FrameTypeId", OtherKey="Id", IsForeignKey=true)]
        public FrameType FrameType
        {
            get
            {
                return this._FrameType.Entity;
            }
            set
            {
                FrameType previousValue = this._FrameType.Entity;
                if ((previousValue != value) || (this._FrameType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("FrameType");
                    if (previousValue != null)
                    {
                        this._FrameType.Entity = null;
                        previousValue.Frames.Remove(this);
                    }
                    this._FrameType.Entity = value;
                    if (value != null)
                    {
                        this._FrameTypeId = value.Id;
                        value.Frames.Add(this);
                    }
                    else
                    {
                        this._FrameTypeId = default(int);
                    }
                    this.SendPropertyChanged("FrameType");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnit in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_Frame", Storage="_LexUnit", ThisKey="LexUnitId", OtherKey="Id", IsForeignKey=true)]
        public LexUnit LexUnit
        {
            get
            {
                return this._LexUnit.Entity;
            }
            set
            {
                LexUnit previousValue = this._LexUnit.Entity;
                if ((previousValue != value) || (this._LexUnit.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LexUnit");
                    if (previousValue != null)
                    {
                        this._LexUnit.Entity = null;
                        previousValue.Frames.Remove(this);
                    }
                    this._LexUnit.Entity = value;
                    if (value != null)
                    {
                        this._LexUnitId = value.Id;
                        value.Frames.Add(this);
                    }
                    else
                    {
                        this._LexUnitId = default(int);
                    }
                    this.SendPropertyChanged("LexUnit");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.Compound in the schema.
    /// </summary>
    [Table(Name = @"public.compound_table")]
    public partial class Compound : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int? _CompProperty;

        private int _CompLexUnitId;

        private int? _Mod1PropertyId;

        private int? _Mod1CategoryId;

        private string _Modifier1;

        private int? _Mod1LexUnitId;

        private int? _Mod2CategoryId;

        private string _Modifier2;

        private int? _Mod2LexUnitId;

        private int? _HeadProperty;

        private string _Head;

        private int? _HeadLexUnitId;

        private int? _Mod2Property;
        #pragma warning restore 0649

        private EntityRef<CompoundProperty> _Property;

        private EntityRef<CompoundProperty> _Property_Mod1;

        private EntityRef<CompoundProperty> _Property_Head;

        private EntityRef<CompoundCategory> _Category_Mod1;

        private EntityRef<CompoundCategory> _Category_Mod2;

        private EntityRef<LexUnit> _LexUnit;

        private EntityRef<LexUnit> _LexUnit_Mod1;

        private EntityRef<LexUnit> _LexUnit_Mod2;

        private EntityRef<LexUnit> _LexUnit_Head;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnCompPropertyChanging(int? value);
        partial void OnCompPropertyChanged();
        partial void OnCompLexUnitIdChanging(int value);
        partial void OnCompLexUnitIdChanged();
        partial void OnMod1PropertyIdChanging(int? value);
        partial void OnMod1PropertyIdChanged();
        partial void OnMod1CategoryIdChanging(int? value);
        partial void OnMod1CategoryIdChanged();
        partial void OnModifier1Changing(string value);
        partial void OnModifier1Changed();
        partial void OnMod1LexUnitIdChanging(int? value);
        partial void OnMod1LexUnitIdChanged();
        partial void OnMod2CategoryIdChanging(int? value);
        partial void OnMod2CategoryIdChanged();
        partial void OnModifier2Changing(string value);
        partial void OnModifier2Changed();
        partial void OnMod2LexUnitIdChanging(int? value);
        partial void OnMod2LexUnitIdChanged();
        partial void OnHeadPropertyChanging(int? value);
        partial void OnHeadPropertyChanged();
        partial void OnHeadChanging(string value);
        partial void OnHeadChanged();
        partial void OnHeadLexUnitIdChanging(int? value);
        partial void OnHeadLexUnitIdChanged();
        partial void OnMod2PropertyChanging(int? value);
        partial void OnMod2PropertyChanged();
        #endregion

        public Compound()
        {
            this._Property  = default(EntityRef<CompoundProperty>);
            this._Property_Mod1  = default(EntityRef<CompoundProperty>);
            this._Property_Head  = default(EntityRef<CompoundProperty>);
            this._Category_Mod1  = default(EntityRef<CompoundCategory>);
            this._Category_Mod2  = default(EntityRef<CompoundCategory>);
            this._LexUnit  = default(EntityRef<LexUnit>);
            this._LexUnit_Mod1  = default(EntityRef<LexUnit>);
            this._LexUnit_Mod2  = default(EntityRef<LexUnit>);
            this._LexUnit_Head  = default(EntityRef<LexUnit>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompProperty in the schema.
        /// </summary>
        [Column(Name = @"comp_property", Storage = "_CompProperty", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? CompProperty
        {
            get
            {
                return this._CompProperty;
            }
            set
            {
                if (this._CompProperty != value)
                {
                    if (this._Property.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompPropertyChanging(value);
                    this.SendPropertyChanging("CompProperty");
                    this._CompProperty = value;
                    this.SendPropertyChanged("CompProperty");
                    this.OnCompPropertyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompLexUnitId in the schema.
        /// </summary>
        [Column(Name = @"comp_lex_unit_id", Storage = "_CompLexUnitId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CompLexUnitId
        {
            get
            {
                return this._CompLexUnitId;
            }
            set
            {
                if (this._CompLexUnitId != value)
                {
                    if (this._LexUnit.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompLexUnitIdChanging(value);
                    this.SendPropertyChanging("CompLexUnitId");
                    this._CompLexUnitId = value;
                    this.SendPropertyChanged("CompLexUnitId");
                    this.OnCompLexUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mod1PropertyId in the schema.
        /// </summary>
        [Column(Name = @"mod1_property", Storage = "_Mod1PropertyId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Mod1PropertyId
        {
            get
            {
                return this._Mod1PropertyId;
            }
            set
            {
                if (this._Mod1PropertyId != value)
                {
                    if (this._Property_Mod1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMod1PropertyIdChanging(value);
                    this.SendPropertyChanging("Mod1PropertyId");
                    this._Mod1PropertyId = value;
                    this.SendPropertyChanged("Mod1PropertyId");
                    this.OnMod1PropertyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mod1CategoryId in the schema.
        /// </summary>
        [Column(Name = @"mod1_category", Storage = "_Mod1CategoryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Mod1CategoryId
        {
            get
            {
                return this._Mod1CategoryId;
            }
            set
            {
                if (this._Mod1CategoryId != value)
                {
                    if (this._Category_Mod1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMod1CategoryIdChanging(value);
                    this.SendPropertyChanging("Mod1CategoryId");
                    this._Mod1CategoryId = value;
                    this.SendPropertyChanged("Mod1CategoryId");
                    this.OnMod1CategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modifier1 in the schema.
        /// </summary>
        [Column(Name = @"modifier1", Storage = "_Modifier1", DbType = "VARCHAR(200)", UpdateCheck = UpdateCheck.Never)]
        public string Modifier1
        {
            get
            {
                return this._Modifier1;
            }
            set
            {
                if (this._Modifier1 != value)
                {
                    this.OnModifier1Changing(value);
                    this.SendPropertyChanging("Modifier1");
                    this._Modifier1 = value;
                    this.SendPropertyChanged("Modifier1");
                    this.OnModifier1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mod1LexUnitId in the schema.
        /// </summary>
        [Column(Name = @"mod1_lex_unit_id", Storage = "_Mod1LexUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Mod1LexUnitId
        {
            get
            {
                return this._Mod1LexUnitId;
            }
            set
            {
                if (this._Mod1LexUnitId != value)
                {
                    if (this._LexUnit_Mod1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMod1LexUnitIdChanging(value);
                    this.SendPropertyChanging("Mod1LexUnitId");
                    this._Mod1LexUnitId = value;
                    this.SendPropertyChanged("Mod1LexUnitId");
                    this.OnMod1LexUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mod2CategoryId in the schema.
        /// </summary>
        [Column(Name = @"mod2_category", Storage = "_Mod2CategoryId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Mod2CategoryId
        {
            get
            {
                return this._Mod2CategoryId;
            }
            set
            {
                if (this._Mod2CategoryId != value)
                {
                    if (this._Category_Mod2.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMod2CategoryIdChanging(value);
                    this.SendPropertyChanging("Mod2CategoryId");
                    this._Mod2CategoryId = value;
                    this.SendPropertyChanged("Mod2CategoryId");
                    this.OnMod2CategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modifier2 in the schema.
        /// </summary>
        [Column(Name = @"modifier2", Storage = "_Modifier2", DbType = "VARCHAR(200)", UpdateCheck = UpdateCheck.Never)]
        public string Modifier2
        {
            get
            {
                return this._Modifier2;
            }
            set
            {
                if (this._Modifier2 != value)
                {
                    this.OnModifier2Changing(value);
                    this.SendPropertyChanging("Modifier2");
                    this._Modifier2 = value;
                    this.SendPropertyChanged("Modifier2");
                    this.OnModifier2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mod2LexUnitId in the schema.
        /// </summary>
        [Column(Name = @"mod2_lex_unit_id", Storage = "_Mod2LexUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Mod2LexUnitId
        {
            get
            {
                return this._Mod2LexUnitId;
            }
            set
            {
                if (this._Mod2LexUnitId != value)
                {
                    if (this._LexUnit_Mod2.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMod2LexUnitIdChanging(value);
                    this.SendPropertyChanging("Mod2LexUnitId");
                    this._Mod2LexUnitId = value;
                    this.SendPropertyChanged("Mod2LexUnitId");
                    this.OnMod2LexUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeadProperty in the schema.
        /// </summary>
        [Column(Name = @"head_property", Storage = "_HeadProperty", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? HeadProperty
        {
            get
            {
                return this._HeadProperty;
            }
            set
            {
                if (this._HeadProperty != value)
                {
                    if (this._Property_Head.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnHeadPropertyChanging(value);
                    this.SendPropertyChanging("HeadProperty");
                    this._HeadProperty = value;
                    this.SendPropertyChanged("HeadProperty");
                    this.OnHeadPropertyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Head in the schema.
        /// </summary>
        [Column(Name = @"head", Storage = "_Head", DbType = "VARCHAR(200)", UpdateCheck = UpdateCheck.Never)]
        public string Head
        {
            get
            {
                return this._Head;
            }
            set
            {
                if (this._Head != value)
                {
                    this.OnHeadChanging(value);
                    this.SendPropertyChanging("Head");
                    this._Head = value;
                    this.SendPropertyChanged("Head");
                    this.OnHeadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeadLexUnitId in the schema.
        /// </summary>
        [Column(Name = @"head_lex_unit_id", Storage = "_HeadLexUnitId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? HeadLexUnitId
        {
            get
            {
                return this._HeadLexUnitId;
            }
            set
            {
                if (this._HeadLexUnitId != value)
                {
                    if (this._LexUnit_Head.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnHeadLexUnitIdChanging(value);
                    this.SendPropertyChanging("HeadLexUnitId");
                    this._HeadLexUnitId = value;
                    this.SendPropertyChanged("HeadLexUnitId");
                    this.OnHeadLexUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mod2Property in the schema.
        /// </summary>
        [Column(Name = @"mod2_property", Storage = "_Mod2Property", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? Mod2Property
        {
            get
            {
                return this._Mod2Property;
            }
            set
            {
                if (this._Mod2Property != value)
                {
                    this.OnMod2PropertyChanging(value);
                    this.SendPropertyChanging("Mod2Property");
                    this._Mod2Property = value;
                    this.SendPropertyChanged("Mod2Property");
                    this.OnMod2PropertyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Property in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompoundProperty_Compound", Storage="_Property", ThisKey="CompProperty", OtherKey="Id", IsForeignKey=true)]
        public CompoundProperty Property
        {
            get
            {
                return this._Property.Entity;
            }
            set
            {
                CompoundProperty previousValue = this._Property.Entity;
                if ((previousValue != value) || (this._Property.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Property");
                    if (previousValue != null)
                    {
                        this._Property.Entity = null;
                    }
                    this._Property.Entity = value;
                    if (value != null)
                    {
                        this._CompProperty = value.Id;
                    }
                    else
                    {
                        this._CompProperty = default(int?);
                    }
                    this.SendPropertyChanged("Property");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Property_Mod1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompoundProperty_Compound1", Storage="_Property_Mod1", ThisKey="Mod1PropertyId", OtherKey="Id", IsForeignKey=true)]
        public CompoundProperty Property_Mod1
        {
            get
            {
                return this._Property_Mod1.Entity;
            }
            set
            {
                CompoundProperty previousValue = this._Property_Mod1.Entity;
                if ((previousValue != value) || (this._Property_Mod1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Property_Mod1");
                    if (previousValue != null)
                    {
                        this._Property_Mod1.Entity = null;
                    }
                    this._Property_Mod1.Entity = value;
                    if (value != null)
                    {
                        this._Mod1PropertyId = value.Id;
                    }
                    else
                    {
                        this._Mod1PropertyId = default(int?);
                    }
                    this.SendPropertyChanged("Property_Mod1");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Property_Head in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompoundProperty_Compound2", Storage="_Property_Head", ThisKey="HeadProperty", OtherKey="Id", IsForeignKey=true)]
        public CompoundProperty Property_Head
        {
            get
            {
                return this._Property_Head.Entity;
            }
            set
            {
                CompoundProperty previousValue = this._Property_Head.Entity;
                if ((previousValue != value) || (this._Property_Head.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Property_Head");
                    if (previousValue != null)
                    {
                        this._Property_Head.Entity = null;
                    }
                    this._Property_Head.Entity = value;
                    if (value != null)
                    {
                        this._HeadProperty = value.Id;
                    }
                    else
                    {
                        this._HeadProperty = default(int?);
                    }
                    this.SendPropertyChanged("Property_Head");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category_Mod1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompoundCategory_Compound", Storage="_Category_Mod1", ThisKey="Mod1CategoryId", OtherKey="Id", IsForeignKey=true)]
        public CompoundCategory Category_Mod1
        {
            get
            {
                return this._Category_Mod1.Entity;
            }
            set
            {
                CompoundCategory previousValue = this._Category_Mod1.Entity;
                if ((previousValue != value) || (this._Category_Mod1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Category_Mod1");
                    if (previousValue != null)
                    {
                        this._Category_Mod1.Entity = null;
                    }
                    this._Category_Mod1.Entity = value;
                    if (value != null)
                    {
                        this._Mod1CategoryId = value.Id;
                    }
                    else
                    {
                        this._Mod1CategoryId = default(int?);
                    }
                    this.SendPropertyChanged("Category_Mod1");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category_Mod2 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CompoundCategory_Compound1", Storage="_Category_Mod2", ThisKey="Mod2CategoryId", OtherKey="Id", IsForeignKey=true)]
        public CompoundCategory Category_Mod2
        {
            get
            {
                return this._Category_Mod2.Entity;
            }
            set
            {
                CompoundCategory previousValue = this._Category_Mod2.Entity;
                if ((previousValue != value) || (this._Category_Mod2.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Category_Mod2");
                    if (previousValue != null)
                    {
                        this._Category_Mod2.Entity = null;
                    }
                    this._Category_Mod2.Entity = value;
                    if (value != null)
                    {
                        this._Mod2CategoryId = value.Id;
                    }
                    else
                    {
                        this._Mod2CategoryId = default(int?);
                    }
                    this.SendPropertyChanged("Category_Mod2");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnit in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_Compound", Storage="_LexUnit", ThisKey="CompLexUnitId", OtherKey="Id", IsForeignKey=true)]
        public LexUnit LexUnit
        {
            get
            {
                return this._LexUnit.Entity;
            }
            set
            {
                LexUnit previousValue = this._LexUnit.Entity;
                if ((previousValue != value) || (this._LexUnit.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LexUnit");
                    if (previousValue != null)
                    {
                        this._LexUnit.Entity = null;
                        previousValue.Compounds.Remove(this);
                    }
                    this._LexUnit.Entity = value;
                    if (value != null)
                    {
                        this._CompLexUnitId = value.Id;
                        value.Compounds.Add(this);
                    }
                    else
                    {
                        this._CompLexUnitId = default(int);
                    }
                    this.SendPropertyChanged("LexUnit");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnit_Mod1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_Compound1", Storage="_LexUnit_Mod1", ThisKey="Mod1LexUnitId", OtherKey="Id", IsForeignKey=true)]
        public LexUnit LexUnit_Mod1
        {
            get
            {
                return this._LexUnit_Mod1.Entity;
            }
            set
            {
                LexUnit previousValue = this._LexUnit_Mod1.Entity;
                if ((previousValue != value) || (this._LexUnit_Mod1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LexUnit_Mod1");
                    if (previousValue != null)
                    {
                        this._LexUnit_Mod1.Entity = null;
                    }
                    this._LexUnit_Mod1.Entity = value;
                    if (value != null)
                    {
                        this._Mod1LexUnitId = value.Id;
                    }
                    else
                    {
                        this._Mod1LexUnitId = default(int?);
                    }
                    this.SendPropertyChanged("LexUnit_Mod1");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnit_Mod2 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_Compound2", Storage="_LexUnit_Mod2", ThisKey="Mod2LexUnitId", OtherKey="Id", IsForeignKey=true)]
        public LexUnit LexUnit_Mod2
        {
            get
            {
                return this._LexUnit_Mod2.Entity;
            }
            set
            {
                LexUnit previousValue = this._LexUnit_Mod2.Entity;
                if ((previousValue != value) || (this._LexUnit_Mod2.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LexUnit_Mod2");
                    if (previousValue != null)
                    {
                        this._LexUnit_Mod2.Entity = null;
                    }
                    this._LexUnit_Mod2.Entity = value;
                    if (value != null)
                    {
                        this._Mod2LexUnitId = value.Id;
                    }
                    else
                    {
                        this._Mod2LexUnitId = default(int?);
                    }
                    this.SendPropertyChanged("LexUnit_Mod2");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnit_Head in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_Compound3", Storage="_LexUnit_Head", ThisKey="HeadLexUnitId", OtherKey="Id", IsForeignKey=true)]
        public LexUnit LexUnit_Head
        {
            get
            {
                return this._LexUnit_Head.Entity;
            }
            set
            {
                LexUnit previousValue = this._LexUnit_Head.Entity;
                if ((previousValue != value) || (this._LexUnit_Head.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LexUnit_Head");
                    if (previousValue != null)
                    {
                        this._LexUnit_Head.Entity = null;
                    }
                    this._LexUnit_Head.Entity = value;
                    if (value != null)
                    {
                        this._HeadLexUnitId = value.Id;
                    }
                    else
                    {
                        this._HeadLexUnitId = default(int?);
                    }
                    this.SendPropertyChanged("LexUnit_Head");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.LexUnit in the schema.
    /// </summary>
    [Table(Name = @"public.lex_unit_table")]
    public partial class LexUnit : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _SynsetId;

        private string _OrthForm;

        private string _Source;

        private bool _NamedEntity;

        private bool _Artificial;

        private bool _StyleMarking;

        private string _OldOrthForm;

        private string _OldOrthVar;

        private string _OrthVar;

        private string _Comment;
        #pragma warning restore 0649

        private EntityRef<WordNet> _WordNets;

        private EntityRef<WikiSense> _WikiSense;

        private EntityRef<SynsetTable> _Synset;

        private EntitySet<Frame> _Frames;

        private EntitySet<Compound> _Compounds;

        private EntitySet<Example> _Examples;

        private EntitySet<LexUnitConnection> _IncomingConnections;

        private EntitySet<LexUnitConnection> _OutgoingConnections;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnSynsetIdChanging(int value);
        partial void OnSynsetIdChanged();
        partial void OnOrthFormChanging(string value);
        partial void OnOrthFormChanged();
        partial void OnSourceChanging(string value);
        partial void OnSourceChanged();
        partial void OnNamedEntityChanging(bool value);
        partial void OnNamedEntityChanged();
        partial void OnArtificialChanging(bool value);
        partial void OnArtificialChanged();
        partial void OnStyleMarkingChanging(bool value);
        partial void OnStyleMarkingChanged();
        partial void OnOldOrthFormChanging(string value);
        partial void OnOldOrthFormChanged();
        partial void OnOldOrthVarChanging(string value);
        partial void OnOldOrthVarChanged();
        partial void OnOrthVarChanging(string value);
        partial void OnOrthVarChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        #endregion

        public LexUnit()
        {
            this._WordNets  = default(EntityRef<WordNet>);
            this._WikiSense  = default(EntityRef<WikiSense>);
            this._Synset  = default(EntityRef<SynsetTable>);
            this._Frames = new EntitySet<Frame>(new Action<Frame>(this.attach_Frames), new Action<Frame>(this.detach_Frames));
            this._Compounds = new EntitySet<Compound>(new Action<Compound>(this.attach_Compounds), new Action<Compound>(this.detach_Compounds));
            this._Examples = new EntitySet<Example>(new Action<Example>(this.attach_Examples), new Action<Example>(this.detach_Examples));
            this._IncomingConnections = new EntitySet<LexUnitConnection>(new Action<LexUnitConnection>(this.attach_IncomingConnections), new Action<LexUnitConnection>(this.detach_IncomingConnections));
            this._OutgoingConnections = new EntitySet<LexUnitConnection>(new Action<LexUnitConnection>(this.attach_OutgoingConnections), new Action<LexUnitConnection>(this.detach_OutgoingConnections));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    if (this._WordNets.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetId in the schema.
        /// </summary>
        [Column(Name = @"synset_id", Storage = "_SynsetId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SynsetId
        {
            get
            {
                return this._SynsetId;
            }
            set
            {
                if (this._SynsetId != value)
                {
                    if (this._Synset.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSynsetIdChanging(value);
                    this.SendPropertyChanging("SynsetId");
                    this._SynsetId = value;
                    this.SendPropertyChanged("SynsetId");
                    this.OnSynsetIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrthForm in the schema.
        /// </summary>
        [Column(Name = @"orth_form", Storage = "_OrthForm", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string OrthForm
        {
            get
            {
                return this._OrthForm;
            }
            set
            {
                if (this._OrthForm != value)
                {
                    this.OnOrthFormChanging(value);
                    this.SendPropertyChanging("OrthForm");
                    this._OrthForm = value;
                    this.SendPropertyChanged("OrthForm");
                    this.OnOrthFormChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Source in the schema.
        /// </summary>
        [Column(Name = @"""source""", Storage = "_Source", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Source
        {
            get
            {
                return this._Source;
            }
            set
            {
                if (this._Source != value)
                {
                    this.OnSourceChanging(value);
                    this.SendPropertyChanging("Source");
                    this._Source = value;
                    this.SendPropertyChanged("Source");
                    this.OnSourceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NamedEntity in the schema.
        /// </summary>
        [Column(Name = @"named_entity", Storage = "_NamedEntity", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool NamedEntity
        {
            get
            {
                return this._NamedEntity;
            }
            set
            {
                if (this._NamedEntity != value)
                {
                    this.OnNamedEntityChanging(value);
                    this.SendPropertyChanging("NamedEntity");
                    this._NamedEntity = value;
                    this.SendPropertyChanged("NamedEntity");
                    this.OnNamedEntityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Artificial in the schema.
        /// </summary>
        [Column(Name = @"artificial", Storage = "_Artificial", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Artificial
        {
            get
            {
                return this._Artificial;
            }
            set
            {
                if (this._Artificial != value)
                {
                    this.OnArtificialChanging(value);
                    this.SendPropertyChanging("Artificial");
                    this._Artificial = value;
                    this.SendPropertyChanged("Artificial");
                    this.OnArtificialChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StyleMarking in the schema.
        /// </summary>
        [Column(Name = @"style_marking", Storage = "_StyleMarking", CanBeNull = false, DbType = "BOOL NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool StyleMarking
        {
            get
            {
                return this._StyleMarking;
            }
            set
            {
                if (this._StyleMarking != value)
                {
                    this.OnStyleMarkingChanging(value);
                    this.SendPropertyChanging("StyleMarking");
                    this._StyleMarking = value;
                    this.SendPropertyChanged("StyleMarking");
                    this.OnStyleMarkingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OldOrthForm in the schema.
        /// </summary>
        [Column(Name = @"old_orth_form", Storage = "_OldOrthForm", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string OldOrthForm
        {
            get
            {
                return this._OldOrthForm;
            }
            set
            {
                if (this._OldOrthForm != value)
                {
                    this.OnOldOrthFormChanging(value);
                    this.SendPropertyChanging("OldOrthForm");
                    this._OldOrthForm = value;
                    this.SendPropertyChanged("OldOrthForm");
                    this.OnOldOrthFormChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OldOrthVar in the schema.
        /// </summary>
        [Column(Name = @"old_orth_var", Storage = "_OldOrthVar", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string OldOrthVar
        {
            get
            {
                return this._OldOrthVar;
            }
            set
            {
                if (this._OldOrthVar != value)
                {
                    this.OnOldOrthVarChanging(value);
                    this.SendPropertyChanging("OldOrthVar");
                    this._OldOrthVar = value;
                    this.SendPropertyChanged("OldOrthVar");
                    this.OnOldOrthVarChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrthVar in the schema.
        /// </summary>
        [Column(Name = @"orth_var", Storage = "_OrthVar", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string OrthVar
        {
            get
            {
                return this._OrthVar;
            }
            set
            {
                if (this._OrthVar != value)
                {
                    this.OnOrthVarChanging(value);
                    this.SendPropertyChanging("OrthVar");
                    this._OrthVar = value;
                    this.SendPropertyChanged("OrthVar");
                    this.OnOrthVarChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [Column(Name = @"""comment""", Storage = "_Comment", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging("Comment");
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WordNets in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WordNet_LexUnit", Storage="_WordNets", ThisKey="Id", OtherKey="GnLexUnitId", IsForeignKey=true)]
        public WordNet WordNets
        {
            get
            {
                return this._WordNets.Entity;
            }
            set
            {
                WordNet previousValue = this._WordNets.Entity;
                if ((previousValue != value) || (this._WordNets.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("WordNets");
                    if (previousValue != null)
                    {
                        this._WordNets.Entity = null;
                        previousValue.LexUnit.Remove(this);
                    }
                    this._WordNets.Entity = value;
                    if (value != null)
                    {
                        this._Id = value.GnLexUnitId;
                        value.LexUnit.Add(this);
                    }
                    else
                    {
                        this._Id = default(int);
                    }
                    this.SendPropertyChanged("WordNets");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WikiSense in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="WikiSense_LexUnit", Storage="_WikiSense", ThisKey="Id", OtherKey="GnLexUnitId", IsForeignKey=true)]
        public WikiSense WikiSense
        {
            get
            {
                return this._WikiSense.Entity;
            }
            set
            {
                WikiSense previousValue = this._WikiSense.Entity;
                if ((previousValue != value) || (this._WikiSense.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("WikiSense");
                    if (previousValue != null)
                    {
                        this._WikiSense.Entity = null;
                        previousValue.LexUnits.Remove(this);
                    }
                    this._WikiSense.Entity = value;
                    if (value != null)
                    {
                        this._Id = value.GnLexUnitId;
                        value.LexUnits.Add(this);
                    }
                    else
                    {
                        this._Id = default(int);
                    }
                    this.SendPropertyChanged("WikiSense");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Synset in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SynsetTable_LexUnit", Storage="_Synset", ThisKey="SynsetId", OtherKey="Id", IsForeignKey=true)]
        public SynsetTable Synset
        {
            get
            {
                return this._Synset.Entity;
            }
            set
            {
                SynsetTable previousValue = this._Synset.Entity;
                if ((previousValue != value) || (this._Synset.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Synset");
                    if (previousValue != null)
                    {
                        this._Synset.Entity = null;
                        previousValue.LexUnits.Remove(this);
                    }
                    this._Synset.Entity = value;
                    if (value != null)
                    {
                        this._SynsetId = value.Id;
                        value.LexUnits.Add(this);
                    }
                    else
                    {
                        this._SynsetId = default(int);
                    }
                    this.SendPropertyChanged("Synset");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Frames in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_Frame", Storage="_Frames", ThisKey="Id", OtherKey="LexUnitId", DeleteRule="NO ACTION")]
        public EntitySet<Frame> Frames
        {
            get
            {
                return this._Frames;
            }
            set
            {
                this._Frames.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Compounds in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_Compound", Storage="_Compounds", ThisKey="Id", OtherKey="CompLexUnitId")]
        public EntitySet<Compound> Compounds
        {
            get
            {
                return this._Compounds;
            }
            set
            {
                this._Compounds.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Examples in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_Example", Storage="_Examples", ThisKey="Id", OtherKey="LexUnitId", DeleteRule="NO ACTION")]
        public EntitySet<Example> Examples
        {
            get
            {
                return this._Examples;
            }
            set
            {
                this._Examples.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for IncomingConnections in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_LexRel", Storage="_IncomingConnections", ThisKey="Id", OtherKey="FromLexUnitId")]
        public EntitySet<LexUnitConnection> IncomingConnections
        {
            get
            {
                return this._IncomingConnections;
            }
            set
            {
                this._IncomingConnections.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for OutgoingConnections in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_LexRel1", Storage="_OutgoingConnections", ThisKey="Id", OtherKey="ToLexUnitId")]
        public EntitySet<LexUnitConnection> OutgoingConnections
        {
            get
            {
                return this._OutgoingConnections;
            }
            set
            {
                this._OutgoingConnections.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Frames(Frame entity)
        {
            this.SendPropertyChanging("Frames");
            entity.LexUnit = this;
        }
    
        private void detach_Frames(Frame entity)
        {
            this.SendPropertyChanging("Frames");
            entity.LexUnit = null;
        }

        private void attach_Compounds(Compound entity)
        {
            this.SendPropertyChanging("Compounds");
            entity.LexUnit = this;
        }
    
        private void detach_Compounds(Compound entity)
        {
            this.SendPropertyChanging("Compounds");
            entity.LexUnit = null;
        }

        private void attach_Examples(Example entity)
        {
            this.SendPropertyChanging("Examples");
            entity.LexUnit = this;
        }
    
        private void detach_Examples(Example entity)
        {
            this.SendPropertyChanging("Examples");
            entity.LexUnit = null;
        }

        private void attach_IncomingConnections(LexUnitConnection entity)
        {
            this.SendPropertyChanging("IncomingConnections");
            entity.LexUnitFrom = this;
        }
    
        private void detach_IncomingConnections(LexUnitConnection entity)
        {
            this.SendPropertyChanging("IncomingConnections");
            entity.LexUnitFrom = null;
        }

        private void attach_OutgoingConnections(LexUnitConnection entity)
        {
            this.SendPropertyChanging("OutgoingConnections");
            entity.LexUnitTo = this;
        }
    
        private void detach_OutgoingConnections(LexUnitConnection entity)
        {
            this.SendPropertyChanging("OutgoingConnections");
            entity.LexUnitTo = null;
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.SynsetConnection in the schema.
    /// </summary>
    [Table(Name = @"public.con_rel_table")]
    public partial class SynsetConnection : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _RelTypeId;

        private int _FromSynsetId;

        private int _ToSynsetId;
        #pragma warning restore 0649

        private EntityRef<SynsetConnectionType> _SynsetConnectionType;

        private EntityRef<SynsetTable> _SynsetFrom;

        private EntityRef<SynsetTable> _SynsetTo;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnRelTypeIdChanging(int value);
        partial void OnRelTypeIdChanged();
        partial void OnFromSynsetIdChanging(int value);
        partial void OnFromSynsetIdChanged();
        partial void OnToSynsetIdChanging(int value);
        partial void OnToSynsetIdChanged();
        #endregion

        public SynsetConnection()
        {
            this._SynsetConnectionType  = default(EntityRef<SynsetConnectionType>);
            this._SynsetFrom  = default(EntityRef<SynsetTable>);
            this._SynsetTo  = default(EntityRef<SynsetTable>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RelTypeId in the schema.
        /// </summary>
        [Column(Name = @"rel_type_id", Storage = "_RelTypeId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RelTypeId
        {
            get
            {
                return this._RelTypeId;
            }
            set
            {
                if (this._RelTypeId != value)
                {
                    if (this._SynsetConnectionType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRelTypeIdChanging(value);
                    this.SendPropertyChanging("RelTypeId");
                    this._RelTypeId = value;
                    this.SendPropertyChanged("RelTypeId");
                    this.OnRelTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FromSynsetId in the schema.
        /// </summary>
        [Column(Name = @"from_synset_id", Storage = "_FromSynsetId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int FromSynsetId
        {
            get
            {
                return this._FromSynsetId;
            }
            set
            {
                if (this._FromSynsetId != value)
                {
                    if (this._SynsetFrom.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFromSynsetIdChanging(value);
                    this.SendPropertyChanging("FromSynsetId");
                    this._FromSynsetId = value;
                    this.SendPropertyChanged("FromSynsetId");
                    this.OnFromSynsetIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ToSynsetId in the schema.
        /// </summary>
        [Column(Name = @"to_synset_id", Storage = "_ToSynsetId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ToSynsetId
        {
            get
            {
                return this._ToSynsetId;
            }
            set
            {
                if (this._ToSynsetId != value)
                {
                    if (this._SynsetTo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnToSynsetIdChanging(value);
                    this.SendPropertyChanging("ToSynsetId");
                    this._ToSynsetId = value;
                    this.SendPropertyChanged("ToSynsetId");
                    this.OnToSynsetIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetConnectionType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SynsetConnectionType_SynsetConnection", Storage="_SynsetConnectionType", ThisKey="RelTypeId", OtherKey="Id", IsForeignKey=true)]
        public SynsetConnectionType SynsetConnectionType
        {
            get
            {
                return this._SynsetConnectionType.Entity;
            }
            set
            {
                SynsetConnectionType previousValue = this._SynsetConnectionType.Entity;
                if ((previousValue != value) || (this._SynsetConnectionType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SynsetConnectionType");
                    if (previousValue != null)
                    {
                        this._SynsetConnectionType.Entity = null;
                        previousValue.SynsetConnections.Remove(this);
                    }
                    this._SynsetConnectionType.Entity = value;
                    if (value != null)
                    {
                        this._RelTypeId = value.Id;
                        value.SynsetConnections.Add(this);
                    }
                    else
                    {
                        this._RelTypeId = default(int);
                    }
                    this.SendPropertyChanged("SynsetConnectionType");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetFrom in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SynsetTable_SynsetConnection", Storage="_SynsetFrom", ThisKey="FromSynsetId", OtherKey="Id", IsForeignKey=true)]
        public SynsetTable SynsetFrom
        {
            get
            {
                return this._SynsetFrom.Entity;
            }
            set
            {
                SynsetTable previousValue = this._SynsetFrom.Entity;
                if ((previousValue != value) || (this._SynsetFrom.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SynsetFrom");
                    if (previousValue != null)
                    {
                        this._SynsetFrom.Entity = null;
                        previousValue.IncomingConnections.Remove(this);
                    }
                    this._SynsetFrom.Entity = value;
                    if (value != null)
                    {
                        this._FromSynsetId = value.Id;
                        value.IncomingConnections.Add(this);
                    }
                    else
                    {
                        this._FromSynsetId = default(int);
                    }
                    this.SendPropertyChanged("SynsetFrom");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SynsetTo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SynsetTable_SynsetConnection1", Storage="_SynsetTo", ThisKey="ToSynsetId", OtherKey="Id", IsForeignKey=true)]
        public SynsetTable SynsetTo
        {
            get
            {
                return this._SynsetTo.Entity;
            }
            set
            {
                SynsetTable previousValue = this._SynsetTo.Entity;
                if ((previousValue != value) || (this._SynsetTo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SynsetTo");
                    if (previousValue != null)
                    {
                        this._SynsetTo.Entity = null;
                        previousValue.OutgoingConnections.Remove(this);
                    }
                    this._SynsetTo.Entity = value;
                    if (value != null)
                    {
                        this._ToSynsetId = value.Id;
                        value.OutgoingConnections.Add(this);
                    }
                    else
                    {
                        this._ToSynsetId = default(int);
                    }
                    this.SendPropertyChanged("SynsetTo");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.Example in the schema.
    /// </summary>
    [Table(Name = @"public.example_table")]
    public partial class Example : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _LexUnitId;

        private string _Text;

        private int? _FrameTypeId;
        #pragma warning restore 0649

        private EntityRef<LexUnit> _LexUnit;

        private EntityRef<FrameType> _FrameType;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnLexUnitIdChanging(int value);
        partial void OnLexUnitIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnFrameTypeIdChanging(int? value);
        partial void OnFrameTypeIdChanged();
        #endregion

        public Example()
        {
            this._LexUnit  = default(EntityRef<LexUnit>);
            this._FrameType  = default(EntityRef<FrameType>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnitId in the schema.
        /// </summary>
        [Column(Name = @"lex_unit_id", Storage = "_LexUnitId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LexUnitId
        {
            get
            {
                return this._LexUnitId;
            }
            set
            {
                if (this._LexUnitId != value)
                {
                    if (this._LexUnit.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLexUnitIdChanging(value);
                    this.SendPropertyChanging("LexUnitId");
                    this._LexUnitId = value;
                    this.SendPropertyChanged("LexUnitId");
                    this.OnLexUnitIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Text in the schema.
        /// </summary>
        [Column(Name = @"text", Storage = "_Text", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if (this._Text != value)
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging("Text");
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FrameTypeId in the schema.
        /// </summary>
        [Column(Name = @"frame_type_id", Storage = "_FrameTypeId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? FrameTypeId
        {
            get
            {
                return this._FrameTypeId;
            }
            set
            {
                if (this._FrameTypeId != value)
                {
                    if (this._FrameType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFrameTypeIdChanging(value);
                    this.SendPropertyChanging("FrameTypeId");
                    this._FrameTypeId = value;
                    this.SendPropertyChanged("FrameTypeId");
                    this.OnFrameTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LexUnit in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LexUnit_Example", Storage="_LexUnit", ThisKey="LexUnitId", OtherKey="Id", IsForeignKey=true)]
        public LexUnit LexUnit
        {
            get
            {
                return this._LexUnit.Entity;
            }
            set
            {
                LexUnit previousValue = this._LexUnit.Entity;
                if ((previousValue != value) || (this._LexUnit.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LexUnit");
                    if (previousValue != null)
                    {
                        this._LexUnit.Entity = null;
                        previousValue.Examples.Remove(this);
                    }
                    this._LexUnit.Entity = value;
                    if (value != null)
                    {
                        this._LexUnitId = value.Id;
                        value.Examples.Add(this);
                    }
                    else
                    {
                        this._LexUnitId = default(int);
                    }
                    this.SendPropertyChanged("LexUnit");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FrameType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="FrameType_Example", Storage="_FrameType", ThisKey="FrameTypeId", OtherKey="Id", IsForeignKey=true)]
        public FrameType FrameType
        {
            get
            {
                return this._FrameType.Entity;
            }
            set
            {
                FrameType previousValue = this._FrameType.Entity;
                if ((previousValue != value) || (this._FrameType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("FrameType");
                    if (previousValue != null)
                    {
                        this._FrameType.Entity = null;
                        previousValue.Examples.Remove(this);
                    }
                    this._FrameType.Entity = value;
                    if (value != null)
                    {
                        this._FrameTypeId = value.Id;
                        value.Examples.Add(this);
                    }
                    else
                    {
                        this._FrameTypeId = default(int?);
                    }
                    this.SendPropertyChanged("FrameType");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Germanet13Context.FrameType in the schema.
    /// </summary>
    [Table(Name = @"public.frame_type_table")]
    public partial class FrameType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Frame;
        #pragma warning restore 0649

        private EntitySet<Frame> _Frames;

        private EntitySet<Example> _Examples;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnFrameChanging(string value);
        partial void OnFrameChanged();
        #endregion

        public FrameType()
        {
            this._Frames = new EntitySet<Frame>(new Action<Frame>(this.attach_Frames), new Action<Frame>(this.detach_Frames));
            this._Examples = new EntitySet<Example>(new Action<Example>(this.attach_Examples), new Action<Example>(this.detach_Examples));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Frame in the schema.
        /// </summary>
        [Column(Name = @"frame", Storage = "_Frame", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Frame
        {
            get
            {
                return this._Frame;
            }
            set
            {
                if (this._Frame != value)
                {
                    this.OnFrameChanging(value);
                    this.SendPropertyChanging("Frame");
                    this._Frame = value;
                    this.SendPropertyChanged("Frame");
                    this.OnFrameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Frames in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="FrameType_Frame", Storage="_Frames", ThisKey="Id", OtherKey="FrameTypeId", DeleteRule="NO ACTION")]
        public EntitySet<Frame> Frames
        {
            get
            {
                return this._Frames;
            }
            set
            {
                this._Frames.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Examples in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="FrameType_Example", Storage="_Examples", ThisKey="Id", OtherKey="FrameTypeId", DeleteRule="NO ACTION")]
        public EntitySet<Example> Examples
        {
            get
            {
                return this._Examples;
            }
            set
            {
                this._Examples.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Frames(Frame entity)
        {
            this.SendPropertyChanging("Frames");
            entity.FrameType = this;
        }
    
        private void detach_Frames(Frame entity)
        {
            this.SendPropertyChanging("Frames");
            entity.FrameType = null;
        }

        private void attach_Examples(Example entity)
        {
            this.SendPropertyChanging("Examples");
            entity.FrameType = this;
        }
    
        private void detach_Examples(Example entity)
        {
            this.SendPropertyChanging("Examples");
            entity.FrameType = null;
        }
    }

}
